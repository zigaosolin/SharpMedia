// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;

namespace SharpMedia.Graphics.GUI.Compiler.Emit
{

    /// <summary>
    /// A root parsable that can never be indexed by parsing mapper because it is a singleton.
    /// </summary>
    /// <remarks>Only one child is allowed for this element.</remarks>
    internal sealed class ASTApplication : IEmittable, IXmlParsable, IResolvable
    {
        #region Private Members
        List<IElement> children = new List<IElement>();
        string nsp = "Test";
        string applicationContext = "ApplicationContext";

        // Resolving members
        ASTWidget rootWidget;
        #endregion

        #region IEmittable Members

        public void Emit(CompileContext context, System.IO.TextWriter writer)
        {

            writer.Write(Common.LicenceInfoStringAsComment);
            writer.WriteLine("// This file was generated by GUI compiler from XML.");
            writer.WriteLine("// Do not change this file because it may be overriden by next build.");
            writer.WriteLine("namespace {0} {{", nsp);
            foreach (IElement child in children)
            {
                if (child is IEmittable && child is ASTWidget)
                {
                    (child as IEmittable).Emit(context, writer);
                }
            }


            // We now create ApplicationContext.
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("  /// <summary>");
            writer.WriteLine("  /// An {0}, the root manager class of GUI.", applicationContext);
            writer.WriteLine("  /// </summary>");
            writer.WriteLine("  public class {0} {{", applicationContext);
            writer.WriteLine();
            writer.WriteLine("    #region Private Members");

            // All widgets.
            for (int i = 0; i < context.Widgets.Count; i++)
            {
                writer.WriteLine("    {0} widget{0} = null;", context.Widgets.Keys[i]);
            }

            // Named styles.
            for (int i = 0; i < context.Styles.Count; i++)
            {
                writer.WriteLine("    SharpMedia.Graphics.GUI.Style style{0} = null;", context.Styles.Keys[i]);
            }

            // Animations.
            for (int i = 0; i < context.Animations.Count; i++)
            {
                writer.WriteLine("    SharpMedia.Graphics.GUI.Animations.IAnimation animation{0} = null;", 
                    context.Animations.Keys[i]);
            }

            // Constructor.
            writer.WriteLine();
            writer.WriteLine("    /// <summary");
            writer.WriteLine("    /// Private constructor.");
            writer.WriteLine("    /// </summary");
            writer.WriteLine("    private {0}() {{}}", applicationContext);

            writer.WriteLine("    #endregion");
            writer.WriteLine();
            writer.WriteLine("    #region Properties");
            writer.WriteLine();

            // The root widget.
            writer.WriteLine();
            writer.WriteLine("    /// </summary>");
            writer.WriteLine("    /// Gets the root widget");
            writer.WriteLine("    /// </summary>");
            writer.WriteLine("    public {0} Root", rootWidget.ClassName);
            writer.WriteLine("    {");
            writer.WriteLine("      get");
            writer.WriteLine("      {");
            writer.WriteLine("        return widget{0};", rootWidget.ClassName);
            writer.WriteLine("      }");
            writer.WriteLine("    }");

            // All widgets.
            for (int i = 0; i < context.Widgets.Count; i++)
            {
                writer.WriteLine();
                writer.WriteLine("    /// </summary>");
                writer.WriteLine("    /// Gets the widget {0}", context.Widgets.Keys[i]);
                writer.WriteLine("    /// </summary>");
                writer.WriteLine("    public {0} {0}", context.Widgets.Keys[i]);
                writer.WriteLine("    {");
                writer.WriteLine("      get");
                writer.WriteLine("      {");
                writer.WriteLine("        return widget{0};", context.Widgets.Keys[i]);
                writer.WriteLine("      }");
                writer.WriteLine("      internal set");
                writer.WriteLine("      {");
                writer.WriteLine("        if(widget{0} != null) throw new System.ArgumentException(\"Cannot re-set variable.\");", context.Widgets.Keys[i]);
                writer.WriteLine("        widget{0} = value;", context.Widgets.Keys[i]);
                writer.WriteLine("      }");
                writer.WriteLine("    }");
            }

            // All styles.
            for (int i = 0; i < context.Styles.Count; i++)
            {
                writer.WriteLine();
                writer.WriteLine("    /// <summary>");
                writer.WriteLine("    /// Gets the style {0}.", context.Styles.Keys[i]);
                writer.WriteLine("    /// </summary");
                writer.WriteLine("    public SharpMedia.Graphics.GUI.Style {0}", context.Styles.Keys[i]);
                writer.WriteLine("    {");
                writer.WriteLine("      get");
                writer.WriteLine("      {");
                writer.WriteLine("        return style{0};", context.Styles.Keys[i]);
                writer.WriteLine("      }");
                writer.WriteLine("    }");
            }

            // All animations.
            for (int i = 0; i < context.Animations.Count; i++)
            {
                writer.WriteLine();
                writer.WriteLine("    /// <summary>");
                writer.WriteLine("    /// Gets the animation {0}.", context.Animations.Keys[i]);
                writer.WriteLine("    /// </summary");
                writer.WriteLine("    public SharpMedia.Graphics.GUI.Animations.IAnimation {0}", context.Animations.Keys[i]);
                writer.WriteLine("    {");
                writer.WriteLine("      get");
                writer.WriteLine("      {");
                writer.WriteLine("        return animation{0};", context.Animations.Keys[i]);
                writer.WriteLine("      }");
                writer.WriteLine("    }");
            }

            writer.WriteLine("    #endregion");
            writer.WriteLine();
            writer.WriteLine("    #region Public Members");
            writer.WriteLine();
            writer.WriteLine("    public static {0} CreateApplication(SharpMedia.Graphics.GUI.Themes.IGuiTheme theme)", context.ApplicationContextType);
            writer.WriteLine("    {");

            writer.WriteLine("      // We first create context.");
            writer.WriteLine("      {0} context = new {0}();", context.ApplicationContextType);
            writer.WriteLine();
            writer.WriteLine("      // We first apply all styles.");

            // We apply all styles.
            for(int i = 0; i < context.Styles.Count; i++)
            {
                context.Styles.Values[i].PreEmit(context, writer);
                writer.Write("      context.style{0} = ", context.Styles.Keys[i]);
                context.Styles.Values[i].Emit(context, writer);
                writer.WriteLine(";");
            }

            // We now apply all animations.
            for (int i = 0; i < context.Animations.Count; i++)
            {
                context.Animations.Values[i].PreEmit(context, writer);
                writer.WriteLine("      context.animation{0} = ", context.Animations.Keys[i]);
                context.Animations.Values[i].Emit(context, writer);
            }

            // At last, we set the root.
            writer.WriteLine();
            writer.WriteLine("      // We create root, createing all children.");
            writer.WriteLine("      new {0}(context);", rootWidget.ClassName);

            // We also apply theme.
            writer.WriteLine("      if(theme != null) theme.AutomaticApply(context.Root, true);");
            writer.WriteLine("      return context;");
            writer.WriteLine("    }");
            writer.WriteLine();

            writer.WriteLine("    #endregion");
            writer.WriteLine();
            writer.WriteLine("  }");


            writer.WriteLine("}");
        }

        #endregion

        #region IElement Members

        public List<IElement> Children
        {
            get { return children; }
        }

        #endregion

        #region IXmlParsable Members

        public void Parse(CompileContext context, System.Xml.XmlNode node)
        {
            XmlAttribute att = node.Attributes["Namespace"];
            nsp = att.InnerText;
            att = node.Attributes["ContextName"];
            if (att != null)
            {
                applicationContext = att.InnerText;
            }

            foreach (XmlNode child in node.ChildNodes)
            {
                if (child.NodeType != XmlNodeType.Element) continue;

                Type type = context.ResolveType(child.Prefix, child.LocalName);

                if (type != null && type.GetInterface("SharpMedia.Graphics.GUI.Widgets.IWidget") != null)
                {

                    ASTWidget widget = new ASTWidget();
                    widget.Parse(context, child);
                    children.Add(widget);
                }
                else if (type != null && type.GetInterface("SharpMedia.Graphics.GUI.IStateStyle") != null)
                {
                    Styles.ASTStyle style = new Styles.ASTStyle();
                    style.Parse(context, child);
                    children.Add(style);
                }
                else if (type != null && type.GetInterface("SharpMedia.Graphics.GUI.Animations.IAnimation") != null)
                {
                    Animations.ASTAnimation animation = new Animations.ASTAnimation(type);
                    animation.Parse(context, child);
                    children.Add(animation);
                }
                else
                {
                    throw new ParseException("Invalid type of not one of style/widget/animation.");
                }
            }

            context.ApplicationContextType = applicationContext;
        }

        #endregion

        #region IResolvable Members

        public void Resolve(CompileContext context, Resolver resolver)
        {
            rootWidget = null;
            for (int i = 0; i < children.Count; i++)
            {
                if (children[i] is ASTWidget)
                {
                    if (rootWidget != null)
                    {
                        throw new ResolveException("Multiple widget root invalid.");
                    }

                    rootWidget = children[i] as ASTWidget;
                }
            }
        }

        #endregion
    }
}

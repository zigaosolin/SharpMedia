// This file was generated by TemplateEngine from template source 'Spherical'
// using template 'Sphericalf. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.Testing;

namespace SharpMedia.Math
{
    /// <summary>
    /// Spherical coordinate is defined by two angles and distance. It can
    /// be normalized, meaning that distance is 1.0. Spherical coordinates
    /// are useful for various applications, because sometimes it is easier
    /// to talk in terms of angles.
    /// </summary>
    [Serializable]
    public struct Sphericalf : IEquatable<Sphericalf>
    {
        #region Public Members

        /// <summary>
        /// Distance.
        /// </summary>
        public float R;

        /// <summary>
        /// Phi, angle between positive x if point is projected on x-y.
        /// </summary>
        public float Phi;

        /// <summary>
        /// Angle between positive z axis and vector that defines the point.
        /// </summary>
        public float Theta;

        #endregion

        #region Properties

        /// <summary>
        /// Normalized spherical.
        /// </summary>
        public Sphericalf Normal
        {
            get { return new Sphericalf(Phi, Theta); }
        }

        /// <summary>
        /// Length of coordinate.
        /// </summary>
        public float Length
        {
            get { return R; }
            set { R = value; }
        }

        /// <summary>
        /// Length of coordinate.
        /// </summary>
        public float Length2
        {
            get { return R*R; }
            //#ifdef Sqrt

            set { R = MathHelper.Sqrt(value); }
            //#endif
        }

        //#ifdef Vector3ClassName Sin Cos Atan


        /// <summary>
        /// Conversion to cartesian coordinate.
        /// </summary>
        public Vector3f Cartesian
        {
            get
            {
                float sint = MathHelper.Sin(Theta);
                float cost = MathHelper.Cos(Theta);
                float sinp = MathHelper.Sin(Phi);
                float cosp = MathHelper.Cos(Phi);

                return new Vector3f(R * sint * cosp,
                                    R * sint * sinp,
                                    R * cost);
            }
            set
            {

                // R is the length of the vector.
                this.R = value.Length;

                // We use atan2 because it will handle cases when x=0.
                Phi = MathHelper.ATan(value.Y, value.X);

                // The delta is this.
                Theta = MathHelper.ACos(value.Z / R);
            }
        }

        //#endif

        #endregion

        #region Overrides

        public override bool Equals(object obj)
        {
            if (obj is Sphericalf)
            {
                return (Sphericalf)obj == this;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return Cartesian.GetHashCode();
        }

        public override string ToString()
        {
            StringBuilder b = new StringBuilder(30);
            b.Append("( ");
            b.Append(R);
            b.Append(", ");
            b.Append(Phi * 180.0 / global::System.Math.PI);
            b.Append("�, ");
            b.Append(Theta * 180.0 / global::System.Math.PI);
            b.Append("�)");
            return b.ToString();
        }

        #endregion

        #region Operators

        /// <summary>
        /// Compares two coordinates for identity.
        /// </summary>
        /// <param name="s1">The first spherical.</param>
        /// <param name="s2">The second spherical.</param>
        /// <returns>Are they equal</returns>
        public static bool operator ==(Sphericalf s1, Sphericalf s2)
        {
            return s1.Phi == s2.Phi && s1.R == s2.R && s1.Theta == s2.Theta;
        }

        /// <summary>
        /// Compares two coordinates for difference
        /// </summary>
        /// <param name="s1">The first spherical.</param>
        /// <param name="s2">The second spherical.</param>
        /// <returns>Are they not equal</returns>
        public static bool operator !=(Sphericalf s1, Sphericalf s2)
        {
            return !(s1 == s2);
        }

        #endregion

        #region Static Members

        //#ifdef NearEqual


        /// <summary>
        /// Near equal comparison.
        /// </summary>
        /// <param name="s1">The first spherical.</param>
        /// <param name="s2">The second spherical.</param>
        /// <returns>Are they nearly equal</returns>
        public static bool NearEqual(Sphericalf s1, Sphericalf s2)
        {
            return MathHelper.NearEqual(s1.Theta, s2.Theta) &&
                   MathHelper.NearEqual(s1.R, s2.R) &&
                   MathHelper.NearEqual(s1.Phi, s2.Phi);
        }

        /// <summary>
        /// Near equal comparison.
        /// </summary>
        /// <param name="s1">The first spherical.</param>
        /// <param name="s2">The second spherical.</param>
        /// <returns>Are they nearly equal</returns>
        public static bool NearEqual(Sphericalf s1, Sphericalf s2, float eps)
        {
            return MathHelper.NearEqual(s1.Theta, s2.Theta, eps) &&
                   MathHelper.NearEqual(s1.R, s2.R, eps) &&
                   MathHelper.NearEqual(s1.Phi, s2.Phi, eps);
        }

        //#endif

        /// <summary>
        /// A zero spherical.
        /// </summary>
        public static Sphericalf Zero
        {
            get
            {
                return new Sphericalf(0.0f, 0.0f, 0.0f);
            }
        }

        

        /// <summary>
        /// A spherical interpolation.
        /// </summary>
        /// <param name="s1">The first coordinate.</param>
        /// <param name="s2">The second coordinate.</param>
        /// <param name="t">Value in range [0,1].</param>
        /// <returns>Spherical coordiante interpolated.</returns>
        public static Sphericalf Interpolate(Sphericalf s1, Sphericalf s2, float t)
        {
            if (t < 0.0f) t = 0.0f;
            else if (t > 1.0f) t = 1.0f;

            float tm1 = 1.0f - t;
            return new Sphericalf(s1.R * tm1 + s2.R * t,
                                  s1.Theta * tm1 + s2.Theta * t,
                                  s1.Phi * tm1 + s2.Phi * t);

        }


        #endregion

        #region Constructors

        /// <summary>
        /// Constructor with both angles and the radius.
        /// </summary>
        /// <param name="r">The radius.</param>
        /// <param name="Theta">Theta, z axis angle.</param>
        /// <param name="Phi">Phi angle.</param>
        public Sphericalf(float r, float phi, float theta)
        {
            this.R = r;
            this.Theta = theta;
            this.Phi = phi;
        }

        /// <summary>
        /// Constructor with only angles, normalized.
        /// </summary>
        /// <param name="Theta">The Theta.</param>
        /// <param name="Phi">The Phi.</param>
        public Sphericalf(float Phi, float Theta)
        {
            this.R = 1.0f;
            this.Theta = Theta;
            this.Phi = Phi;
        }

        #endregion

        #region IEquatable<Sphericalf> Members

        public bool Equals(Sphericalf other)
        {
            return this == other;
        }

        #endregion

    }

#if SHARPMEDIA_TESTSUITE

    [TestSuite]
    internal class Test_Sphericalf
    {
    /*
        [CorrectnessTest]
        public void Property()
        {
            Sphericalf s = new Sphericalf(MathHelper.ToRadians(60.0), MathHelper.ToRadians(30.0));
            Assert.IsTrue(MathHelper.NearEqual(MathHelper.ToRadians(60.0), s.Phi));
            Assert.IsTrue(MathHelper.NearEqual(MathHelper.ToRadians(30.0), s.Theta));
            Assert.AreEqual(1.0, s.R);
            Assert.AreEqual(1.0, s.Length);
            Assert.AreEqual(s, s.Normal);
        }

        [CorrectnessTest]
        public void Conv()
        {
            Vector3d v = new Vector3d(1.0, 1.0, 1.0);
            v = v.Normal;
            Sphericalf s = v.Spherical;
            Assert.IsTrue(Vector3d.NearEqual(s.Cartesian, v));  
        }
    */
    }
#endif
}

// This file was generated by TemplateEngine from template source 'Vector2'
// using template 'Vector2i. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//

using System;
using SharpMedia.Testing;

namespace SharpMedia.Math
{
    /// <summary>
    /// A two dimensional vector of genetic type. Two dimensional vector can also
    /// represent a point (with the same coordinates). It holds both point and vector
    /// functionality.
    /// </summary>
    [Serializable]
    public struct Vector2i
            : IComparable,
              IComparable<Vector2i>,
              IEquatable<Vector2i>
    {
        #region Public Members

        /// <summary>
        /// A vector processor delegate. Used at many places, like solver etc. Processor
        /// is a kind of Vector2i transformator.
        /// </summary>
        /// <param name="input">Input, as vector.</param>
        /// <returns>Vector output.</returns>
        public delegate Vector2i Processor(Vector2i input);

        /// <summary>
        /// The X component of the vector.
        /// </summary>
        public int X;

        /// <summary>
        /// The Y component of the vector.
        /// </summary>
        public int Y;

        #endregion

        #region Static Helpers

        /// <summary>
        /// A zero vector.
        /// </summary>
        public static Vector2i Zero
        {
            get { return new Vector2i(0, 0); }
        }

        /// <summary>
        /// Unit vector in axis X.
        /// </summary>
        public static Vector2i AxisX
        {
            get { return new Vector2i(0, 1); }
        }

        /// <summary>
        /// Unit vector in axis Y.
        /// </summary>
        public static Vector2i AxisY
        {
            get { return new Vector2i(0, 1); }
        }

        /// <summary>
        /// Component multiplication.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="v2">The seconf vector.</param>
        /// <returns>A vector, where each component is multiplief by another vector.</returns>
        public static Vector2i ComponentMultiply(Vector2i v1, Vector2i v2)
        {
            return new Vector2i(v1.X * v2.X, v1.Y * v2.Y);
        }

        /// <summary>
        /// Components division of two vectors.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Resulting vector.</returns>
        public static Vector2i ComponentDivision(Vector2i v1, Vector2i v2)
        {
            return new Vector2i(v1.X / v2.X, v1.Y / v2.Y);
        }

        

        

        


        #endregion

        #region Overrides

        /// <summary>
        /// Outputs vector in (X,Y) form.
        /// </summary>
        /// <returns>Vector convertef to string.</returns>
        public override string ToString()
        {
            return "(" + X.ToString() + " ," + Y.ToString() + ")";
        }

        /// <summary>
        /// Checks if objects equal.
        /// </summary>
        /// <param name="obj">The other object.</param>
        /// <returns>Are objects equal.</returns>
        public override bool Equals(object obj)
        {
            if (obj.GetType() == this.GetType()) return this == (Vector2i)obj;
            return false;
        }

        /// <summary>
        /// Obtain the hash code.
        /// </summary>
        /// <returns>The hash code.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region Operators


        /// <summary>
        /// Overloadable addition.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result of addition.</returns>
        public static Vector2i operator +(Vector2i v1, Vector2i v2)
        {
            return new Vector2i(v1.X + v2.X, v1.Y + v2.Y);
        }

        /// <summary>
        /// Overloadable substraction.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result of substraction.</returns>
        public static Vector2i operator -(Vector2i v1, Vector2i v2)
        {
            return new Vector2i(v1.X - v2.X, v1.Y - v2.Y);
        }

        /// <summary>
        /// Overloadable multiplication, or so callef dot product. Result is a scalar.
        /// Dot product can be interpreteref as:
        /// <code>this * other == this.Length * other.Length * this.AngleTo(other)</code>
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The seconf vector.</param>
        /// <returns>Result of substraction.</returns>
        public static int operator *(Vector2i v1, Vector2i v2)
        {
            return v1.X * v2.X + v1.Y * v2.Y;
        }

        /// <summary>
        /// Vector multiplication with scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector2i operator *(Vector2i v1, int f)
        {
            return new Vector2i(v1.X * f, v1.Y * f);
        }

        /// <summary>
        /// Vector multiplication with scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector2i operator *(int f, Vector2i v1)
        {
            return new Vector2i(v1.X * f, v1.Y * f);
        }

        /// <summary>
        /// Vector dividef bY scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector2i operator /(Vector2i v1, int f)
        {
            return new Vector2i(v1.X / f, v1.Y / f);
        }


        /// <summary>
        /// Negation operator.
        /// </summary>
        /// <param name="v">The vector.</param>
        /// <returns>Negatef vector (direction flipped).</returns>
        public static Vector2i operator -(Vector2i v)
        {
            return v * 1;
        }

        /// <summary>
        /// Checks if vectors are equal. This check is precise anf maY not give desirable
        /// result if small errors occur due to precission errors.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The seconf vector.</param>
        /// <returns>Are vectorrs equal.</returns>
        public static bool operator ==(Vector2i v1, Vector2i v2)
        {
            return (v1.X == v2.X) && (v1.Y == v2.Y);
        }

        /// <summary>
        /// Returns if vectors are different.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The seconf vector.</param>
        /// <returns>Are vectors different.</returns>
        public static bool operator !=(Vector2i v1, Vector2i v2)
        {
            return !(v1 == v2);
        }

        #endregion

        #region Properties


        /// <summary>
        /// Index access to vector.
        /// </summary>
        /// <param name="indeX">The indeX.</param>
        public int this[uint index]
        {
            get
            {
                if (index == 0) return X;
                if (index == 1) return Y;
                throw new ArgumentException("Invalid index for 2D vector.");
            }
            set
            {
                if (index == 0) X = value;
                else if (index == 1) Y = value;
                else throw new ArgumentException("Invalid index for 2D vector.");
            }
        }

        /// <summary>
        /// The obsolete x-property getter.
        /// </summary>
        [Obsolete]
        public int x
        {
            get { return X; }
            set { X = value; }
        }

        /// <summary>
        /// The obsolete x-property getter.
        /// </summary>
        [Obsolete]
        public int y
        {
            get { return Y; }
            set { Y = value; }
        }

        

        /// <summary>
        /// Length squaref.
        /// </summary>
        public int Length2
        {
            get { return this * this; }
            set { this = this * value / (this * this); }
        }

        //#ifdef Vector3ClassName


        /// <summary>
        /// The same vector, but in 3D (the z = 0).
        /// </summary>
        public Vector3i Vec3
        {
            set { X = value.X; Y = value.Y; }
            get { return new Vector3i(X, Y, 0); }
        }

        //#endif

        

        

        #endregion

        #region Swizzles

        /// <summary>
        /// The XX swizzle mask for vector.
        /// </summary>
        public Vector2i XX
        {
            get { return new Vector2i(X, X); }
            set { X = value.Y; }
        }

        /// <summary>
        /// The XY swizzle mask for vector.
        /// </summary>
        public Vector2i XY
        {
            get { return this; }
            set { this = value; }
        }

        /// <summary>
        /// The YX swizzle mask for vector.
        /// </summary>
        public Vector2i YX
        {
            get { return new Vector2i(Y, X); }
            set { this = value.YX; }
        }

        /// <summary>
        /// The YY swizzle mask for vector.
        /// </summary>
        public Vector2i YY
        {
            get { return new Vector2i(Y, Y); }
            set { Y = value.Y; }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor with arguments.
        /// </summary>
        /// <param name="X">The X component.</param>
        /// <param name="Y">The Y component.</param>
        public Vector2i(int X, int Y)
        {
            this.X = X;
            this.Y = Y;
        }

        /// <summary>
        /// CopY constructor.
        /// </summary>
        /// <param name="r">The vector to copY.</param>
        public Vector2i(Vector2i r)
        {
            X = r.X;
            Y = r.Y;
        }

        

        #endregion

        #region IEquatable<Vector2i> Members

        public bool Equals(Vector2i other)
        {
            return this == other;
        }

        #endregion

        #region IComparable<Vector2i> Members

        public int CompareTo(Vector2i other)
        {
            int cmp = X.CompareTo(other.X);
            if (cmp != 0) return cmp;
            return Y.CompareTo(other.Y);
        }

        #endregion

        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (obj.GetType() == this.GetType()) return CompareTo((Vector2i)obj);
            throw new Exception("Cannot compare objects.");
        }

        #endregion

        #region Conversions

        //#ifdef Vector3ClassName


        public static implicit operator Vector3i(Vector2i v)
        {
            return new Vector3i(v.X, v.Y, 0);
        }

        //#endif

        //#ifdef Vector4ClassName


        public static implicit operator Vector4i(Vector2i v)
        {
            return new Vector4i(v.X, v.Y, 0, 0);
        }

        //#endif

        #endregion
    }

#if SHARPMEDIA_TESTSUITE

    [TestSuite]
    internal class Test_Vector2i
    {
        
    }

#endif

}
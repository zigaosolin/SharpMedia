// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Text;
using SharpMedia.Math.Matrix;
using SharpMedia.Testing;

namespace SharpMedia.Math
{
    /// <summary>
    /// Quaternion is a class that can be used to represent rotations and
    /// scaling. It is actually a hyper complex number with one real and
    /// three imagionary coefficients.
    /// </summary>
    [Serializable]
    public struct @ClassName : IEquatable<@ClassName>, IComparable, IComparable<@ClassName>
    {
        #region Public Members

        /// <summary>
        /// Real part of quaternion.
        /// </summary>
        public @TypeName Re;

        /// <summary>
        /// Imagionary part of quaternion.
        /// </summary>
        public @Vector3ClassName Im;

        #endregion

        #region Properties

        //#ifdef Vector3ClassName

        /// <summary>
        /// Is quaternion real (no imagionary part).
        /// </summary>
        public bool IsReal
        {
            get { return Im == @Vector3ClassName.Zero; }
        }

        //#endif

        /// <summary>
        /// The first imagionary part.
        /// </summary>
        public @TypeName Im1
        {
            get { return Im.X; }
            set { Im.X = value; }
        }

        /// <summary>
        /// The second imagionary part.
        /// </summary>
        public @TypeName Im2
        {
            get { return Im.Y; }
            set { Im.Y = value; }
        }

        /// <summary>
        /// The third imagionary part.
        /// </summary>
        public @TypeName Im3
        {
            get { return Im.Z; }
            set { Im.Z = value; }
        }

        /// <summary>
        /// The length squared of quaternion.
        /// </summary>
        public @TypeName Length2
        {
            get { return Re * Re + Im * Im; }
        }

        //#ifdef Sqrt

        /// <summary>
        /// Length of quaternion.
        /// </summary>
        public @TypeName Length
        {
            get { return @Sqrt(Re * Re + Im * Im); }
        }

        /// <summary>
        /// The normal of quaternion.
        /// </summary>
        public @ClassName Normal
        {
            get
            {
                return this / Length;
            }
        }

        //#endif

        //#ifdef NearEqual

        /// <summary>
        /// Checks if quaternion is normalized.
        /// </summary>
        public bool IsNormalized
        {
            get { return @NearEqual(Length2, @One); }
        }

        //#endif

        /// <summary>
        /// The element accessor.
        /// </summary>
        public @TypeName this[uint index]
        {
            get
            {
                switch (index)
                {
                    case 0: return Re;
                    case 1: return Im1;
                    case 2: return Im2;
                    case 3: return Im3;
                    default: throw new ArgumentException("Invalid index accessor.");
                }
            }
            set
            {
                switch (index)
                {
                    case 0: Re = value; break;
                    case 1: Im1 = value; break;
                    case 2: Im2 = value; break;
                    case 3: Im3 = value; break;
                    default: throw new ArgumentException("Invalid index accessor.");
                }
            }
        }

        /// <summary>
        /// Conjugate of quaterion.
        /// </summary>
        public @ClassName Conjugate
        {
            get
            {
                return new @ClassName(Re, -Im);
            }
        }

        /// <summary>
        /// Inverse of quaternion.
        /// </summary>
        public @ClassName Inverse
        {
            get
            {
                return Conjugate / Length2;
            }
        }

        /// <summary>
        /// Inverse if quaternion is normalized.
        /// </summary>
        public @ClassName NormInverse
        {
            get
            {
                return Conjugate;
            }
        }

        /// <summary>
        /// Exponent of quaternion.
        /// </summary>
        public @ClassName Exp
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        /// <summary>
        /// Logarithm of quaternion.
        /// </summary>
        public @ClassName Log
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        //#ifdef Atan

        /// <summary>
        /// Roll represented by quaternion.
        /// </summary>
        public @TypeName Roll
        {
            get
            {
                return @Atan(
                    2 * (Im.X * Im.Y + Re * Im.Z),
                    Re * Re + Im.X * Im.X - Im.Y * Im.Y - Im.Z * Im.Z);
            }
        }

        /// <summary>
        /// Pitch represented by quaternion.
        /// </summary>
        public @TypeName Pitch
        {
            get
            {
                return @Atan(
                    2 * (Im.Y * Im.Z + Re * Im.X),
                    Re * Re - Im.X * Im.X - Im.Y * Im.Y + Im.Z * Im.Z);
            }
        }

        //#endif

        //#ifdef Asin

        /// <summary>
        /// Yaw represented by quaternion.
        /// </summary>
        public @TypeName Yaw
        {
            get
            {
                return @Asin((-2 * (Im.X * Im.Z - Re * Im.Y)));
            }
        }

        //#endif

        //#ifdef Vector3ClassName

        /// <summary>
        /// The X axis of quaternion.
        /// </summary>
        public @Vector3ClassName AxisX
        {
            get
            {
                @TypeName fTy = 2 * Im.Y;
                @TypeName fTz = 2 * Im.Z;
                @TypeName fTwy = fTy * Re;
                @TypeName fTwz = fTz * Re;
                @TypeName fTxy = fTy * Im.X;
                @TypeName fTxz = fTz * Im.X;
                @TypeName fTyy = fTy * Im.Y;
                @TypeName fTzz = fTz * Im.Z;

                return new @Vector3ClassName(@One - (fTyy + fTzz), fTxy + fTwz, fTxz - fTwy);
            }
        }

        /// <summary>
        /// The Y axis of quaternion.
        /// </summary>
        public @Vector3ClassName AxisY
        {
            get
            {
                @TypeName fTx = 2 * Im.X;
                @TypeName fTy = 2 * Im.Y;
                @TypeName fTz = 2 * Im.Z;
                @TypeName fTwx = fTx * Re;
                @TypeName fTwz = fTz * Re;
                @TypeName fTxx = fTx * Im.X;
                @TypeName fTxy = fTy * Im.X;
                @TypeName fTyz = fTz * Im.Y;
                @TypeName fTzz = fTz * Im.Z;

                return new @Vector3ClassName(fTxy - fTwz, @One - (fTxx + fTzz), fTyz + fTwx);
            }
        }

        /// <summary>
        /// The Z axis of quaternion.
        /// </summary>
        public @Vector3ClassName AxisZ
        {
            get
            {
                @TypeName fTx = 2 * Im.X;
                @TypeName fTy = 2 * Im.Y;
                @TypeName fTz = 2 * Im.Z;
                @TypeName fTwx = fTx * Re;
                @TypeName fTwy = fTy * Re;
                @TypeName fTxx = fTx * Im.X;
                @TypeName fTxz = fTz * Im.X;
                @TypeName fTyy = fTy * Im.Y;
                @TypeName fTyz = fTz * Im.Y;

                return new @Vector3ClassName(fTxz + fTwy, fTyz - fTwx, @One - (fTxx + fTyy));
            }
        }

        //#endif

        #endregion

        #region Overrides

        public override bool Equals(object obj)
        {
            if (obj is @ClassName)
            {
                return this == (@ClassName)obj;
            }
            return false;
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder(4 * 3 + 8);
            builder.Append("( ");
            builder.Append(Re);
            builder.Append(", ");
            builder.Append(Im.X);
            builder.Append(", ");
            builder.Append(Im.Y);
            builder.Append(", ");
            builder.Append(Im.Z);
            builder.Append(")");
            return builder.ToString();
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region Constants

        /// <summary>
        /// A zero quaternion.
        /// </summary>
        public static @ClassName Zero
        {
            get
            {
                return new @ClassName(@Zero, @Zero, @Zero, @Zero);
            }
        }

        /// <summary>
        /// A multiplication identity.
        /// </summary>
        public static @ClassName Identity
        {
            get
            {
                return new @ClassName(@One, @Zero, @Zero, @Zero);
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Real part and imagionary part vector constructor.
        /// </summary>
        /// <param name="r">The real part.</param>
        /// <param name="i">The imagionary part.</param>
        public @ClassName(@TypeName r, @Vector3ClassName i)
        {
            Re = r;
            Im = i;
        }

        /// <summary>
        /// Real part and imagionary part vector constructor.
        /// </summary>
        /// <param name="r">The real part.</param>
        /// <param name="i">The imagionary part.</param>
        public @ClassName(@TypeName r, @TypeName i1, @TypeName i2, @TypeName i3)
        {
            Re = r;
            Im = new @Vector3ClassName(i1, i2, i3);
        }

        #endregion

        #region Static Members

        //#ifdef Sqrt && Matrix3x3ClassName

        /// <summary>
        /// Converts quaterion from 3x3 rotational matrix.
        /// </summary>
        /// <param name="m">The matrix.</param>
        /// <returns>The quaternion representing rotations of 3x3 matrix.</returns>
        public static @ClassName FromMatrix(@Matrix3x3ClassName m)
        {
            @TypeName m00 = m[0, 0];
            @TypeName m11 = m[1, 1];
            @TypeName m22 = m[2, 2];
            @TypeName T = 4 * (@One - m00 * m00 - m11 * m11 - m22 * m22);

            if (T > @Zero)
            {
                @TypeName S = (@TypeName)0.5 / @Sqrt(T);

                return new @ClassName((@TypeName)0.25 / S,
                    (m[2, 1] - m[1, 2]) * S,
                    (m[0, 2] - m[2, 0]) * S,
                    (m[1, 0] - m[0, 1]) * S);
            }
            else
            {
                if (m00 > m11 && m00 > m22)
                {
                    @TypeName S = (@TypeName)2.0 * @Sqrt(@One + m00 - m11 - m22);
                    @TypeName S_inv = @One / S;
                    return new @ClassName(
                        (m[1, 2] + m[2, 1]) * S_inv,
                        (@TypeName)0.5 * S_inv,
                        (m[0, 1] + m[1, 0]) * S_inv,
                        (m[0, 2] + m[2, 0]) * S_inv);


                }
                else if (m11 > m00 && m11 > m22)
                {
                    @TypeName S = (@TypeName)2.0 * @Sqrt(@One + m11 - m00 - m22);
                    @TypeName S_inv = @One / S;

                    return new @ClassName(
                        (m[0, 2] + m[2, 0]) * S_inv,
                        (m[0, 1] + m[1, 0]) * S_inv,
                        (@TypeName)0.5 * S_inv,
                        (m[1, 2] + m[2, 1]) * S_inv);
                }
                else
                {
                    @TypeName S = (@TypeName)2.0 * @Sqrt(@One + m22 - m00 - m11);
                    @TypeName S_inv = @One / S;

                    return new @ClassName(
                        (m[0, 1] + m[1, 0]) * S_inv,
                        (m[0, 2] + m[2, 0]) * S_inv,
                        (m[1, 2] + m[2, 1]) * S_inv,
                        (@TypeName)0.5 * S_inv);
                }
            }
        }

        //#endif

        //#ifdef Sqrt && Sin

        /// <summary>
        /// Constructs quaterion from axis and angle.
        /// </summary>
        /// <param name="axis">The axis.</param>
        /// <param name="angle">The angle around axis.</param>
        /// <returns>Quaternion representing transform.</returns>
        public static @ClassName FromAxis(@Vector3ClassName axis, @TypeName angle)
        {
            @TypeName sin = @Sin(angle * (@TypeName)0.5);
            @TypeName cos = @Sqrt(@One - sin * sin);

            return (new @ClassName(cos, axis * sin)).Normal;
        }

        //#endif

        //#ifdef Matrix3x3ClassName

        /// <summary>
        /// Conversion of quaternion to matrix.
        /// </summary>
        /// <returns>Immutable converted matrix.</returns>
        public @Matrix3x3ClassName ToMatrix()
        {
            @Vector3ClassName im_2 = @Vector3ClassName.ComponentMultiply(Im, Im);

            return new @Matrix3x3ClassName(
                @One - 2 * (im_2.Y + im_2.Z), 2 * (Im.X * Im.Y - Im.Z * Re), 2 * (Im.X * Im.Z + Im.Y * Re),
                2 * (Im.X * Im.Y + Im.Z * Re), @One - 2 * (im_2.X + im_2.Z), 2 * (Im.Y * Im.Z - Im.X * Re),
                2 * (Im.X * Im.Z - Im.Y * Re), 2 * (Im.Y * Im.Z + Im.Y * Re), @One - 2 * (im_2.X + im_2.Y));
        }

        //#endif

        //#ifdef Acos && Sqrt

        /// <summary>
        /// Conversion of quaternion to axis and angle.
        /// </summary>
        /// <param name="angle">The angle in radians.</param>
        /// <param name="axis">The axis.</param>
        public void ToAxisAngle(out @TypeName angle, out @Vector3ClassName axis)
        {
            // We calculate the imagionary length, just to make sure
            // to handle special case (0,0,0,0)
            @TypeName l2 = Im * Im;
            if (l2 > @Zero)
            {
                angle = 2 * @Acos(Re);
                @TypeName l_inv = @One / @Sqrt(l2);
                axis = Im * l_inv;
            }
            else
            {
                // Any axis is ok.
                angle = 0;
                axis = @Vector3ClassName.AxisX;
            }
        }

        //#endif

        //#ifdef NearEqual

        /// <summary>
        /// Are vectors nearly equal.
        /// </summary>
        /// <param name="q1">The quaternion to compare.</param>
        /// <param name="q2">The other quaternion.</param>
        public static bool NearEqual(@ClassName q1, @ClassName q2)
        {
            return @NearEqual(q2.Re, q1.Re)
                   && @Vector3ClassName.NearEqual(q1.Im, q2.Im);

        }

        /// <summary>
        /// Are vectors nearly equal.
        /// </summary>
        /// <param name="q1">The quaternion to compare.</param>
        /// <param name="q2">The other quaternion.</param>
        /// <param name="eps">Maximum difference.</param>
        public static bool NearEqual(@ClassName q1, @ClassName q2, @TypeName eps)
        {
            return @NearEqual(q2.Re, q1.Re, eps)
                   && @Vector3ClassName.NearEqual(q1.Im, q2.Im, eps);

        }

        //#endif


        #endregion

        #region Operations

        /// <summary>
        /// Are quaternions equal.
        /// </summary>
        public static bool operator ==(@ClassName q1, @ClassName q2)
        {
            return q1.Re == q2.Re && q1.Im == q2.Im;
        }

        /// <summary>
        /// Are quaternions not equal.
        /// </summary>
        public static bool operator !=(@ClassName q1, @ClassName q2)
        {
            return !(q1 == q2);
        }

        /// <summary>
        /// Quaternion added to real.
        /// </summary>
        public static @ClassName operator +(@ClassName q, @TypeName r)
        {
            return new @ClassName(q.Re + r, q.Im);
        }

        /// <summary>
        /// Quaternion added to real.
        /// </summary>
        public static @ClassName operator +(@TypeName r, @ClassName q)
        {
            return q + r;
        }

        //#ifdef ComplexClassName

        /// <summary>
        /// Quaternion added to complex.
        /// </summary>
        /// <param name="q">The quaternion.</param>
        /// <param name="c">The complex.</param>
        /// <returns>Quaternion result.</returns>
        public static @ClassName operator +(@ClassName q, @ComplexClassName c)
        {
            return new @ClassName(q.Re + c.Re, q.Im1 + c.Im, q.Im2, q.Im3);
        }

        /// <summary>
        /// Quaternion added to complex.
        /// </summary>
        /// <param name="q">The quaternion.</param>
        /// <param name="c">The complex.</param>
        /// <returns>Quaternion result.</returns>
        public static @ClassName operator +(@ComplexClassName c, @ClassName q)
        {
            return new @ClassName(q.Re + c.Re, q.Im1 + c.Im, q.Im2, q.Im3);
        }

        //#endif

        /// <summary>
        /// Adds two quaternions.
        /// </summary>
        /// <param name="q1">First quaterion.</param>
        /// <param name="q2">Second quaterion.</param>
        /// <returns></returns>
        public static @ClassName operator +(@ClassName q1, @ClassName q2)
        {
            return new @ClassName(q1.Re + q2.Re, q1.Im + q2.Im);
        }

        /// <summary>
        /// Quaternion substracted by real.
        /// </summary>
        public static @ClassName operator -(@ClassName q, @TypeName r)
        {
            return new @ClassName(q.Re - r, q.Im);
        }

        //#ifdef ComplexClassName

        /// <summary>
        /// Quaternion substracted by complex.
        /// </summary>
        /// <param name="q">The quaternion.</param>
        /// <param name="c">The complex.</param>
        /// <returns>Quaternion result.</returns>
        public static @ClassName operator -(@ClassName q, @ComplexClassName c)
        {
            return new @ClassName(q.Re - c.Re, q.Im1 - c.Im, q.Im2, q.Im3);
        }

        //#endif

        /// <summary>
        /// Substracts two quaternions.
        /// </summary>
        /// <param name="q1">First quaterion.</param>
        /// <param name="q2">Second quaterion.</param>
        /// <returns></returns>
        public static @ClassName operator -(@ClassName q1, @ClassName q2)
        {
            return new @ClassName(q1.Re - q2.Re, q1.Im - q2.Im);
        }

        /// <summary>
        /// Multiplication by scalar.
        /// </summary>
        /// <param name="q">The quaternions.</param>
        /// <param name="f">The scalar.</param>
        /// <returns>Quaternion scaled.</returns>
        public static @ClassName operator *(@ClassName q, @TypeName f)
        {
            return new @ClassName(q.Re * f, q.Im * f);
        }

        /// <summary>
        /// Multiplication by scalar.
        /// </summary>
        /// <param name="q">The quaternions.</param>
        /// <param name="f">The scalar.</param>
        /// <returns>Quaternion scaled.</returns>
        public static @ClassName operator *(@TypeName f, @ClassName q)
        {
            return q * f;
        }

        /// <summary>
        /// Division by scalar.
        /// </summary>
        /// <param name="q">The quaternions.</param>
        /// <param name="f">The scalar.</param>
        /// <returns>Quaternion scaled.</returns>
        public static @ClassName operator /(@ClassName q, @TypeName f)
        {
            return q * (@One / f);
        }

        /// <summary>
        /// Quaternion multiplication.
        /// </summary>
        /// <param name="q1">The first quaternion.</param>
        /// <param name="q2">The second quaternion.</param>
        /// <returns>Resulting quaterion.</returns>
        public static @ClassName operator *(@ClassName q1, @ClassName q2)
        {
            @Vector3ClassName d1 = q2.Re * q1.Im;
            @Vector3ClassName d2 = q1.Re * q2.Im;
            @Vector3ClassName d3 = q1.Im ^ q2.Im;

            return new @ClassName(q1.Re * q2.Re - q1.Im * q2.Im,
                 d1 + d2 + d3);
        }

        /// <summary>
        /// Quaternion division. If quaternions aRe unit, use q1*q2.Conjugate because
        /// it is faster.
        /// </summary>
        /// <param name="q1">The first quaternion.</param>
        /// <param name="q2">The second quaternion.</param>
        /// <returns></returns>
        public static @ClassName operator /(@ClassName q1, @ClassName q2)
        {
            return q1 * q2.Inverse;
        }

        /// <summary>
        /// Transforms vector as quaternion.
        /// </summary>
        /// <param name="q1">The quaternion</param>
        /// <param name="v">Vector, treatet as quaternion with real component of @Zero
        /// and imaginary component of vector.</param>
        /// <returns>Transformed vector</returns>
        public static @Vector3ClassName operator *(@ClassName q1, @Vector3ClassName v)
        {
            // Transformation of vector.
            @Vector3ClassName uv, uuv;
            uv = q1.Im ^ v;
            uuv = q1.Im ^ uv;
            uv *= (2 * q1.Re);
            uuv *= 2;

            return v + uv + uuv;
        }


        #endregion

        #region Interpolations

        /// <summary>
        /// Spherical interpolation between two quaternions. Both must be unit quaternions.
        /// </summary>
        /// <param name="q1">The first quaternion.</param>
        /// <param name="q2">The seconst quaternion.</param>
        /// <param name="t">The weighting factor, in range [0,1].</param>
        /// <returns>Interpolated quaternion.</returns>
        public static @ClassName Slerp(@ClassName q1, @ClassName q2, @TypeName t)
        {
            // We always want the shortest path.
            throw new NotImplementedException();
        }

        /// <summary>
        /// A linear interpolation. May be a bit jerky.
        /// </summary>
        /// <param name="q1">The first quaternion.</param>
        /// <param name="q2">The second quaternion.</param>
        /// <param name="t">The path between them.</param>
        /// <returns>Quaternion in between.</returns>
        public static @ClassName Linear(@ClassName q1, @ClassName q2, @TypeName t)
        {
            return (q1 * (@One - t) + q2 * t).Normal;
        }

        /// <summary>
        /// A cubic interpolation, using 4 rotation weights.
        /// </summary>
        /// <param name="q1">The first quaternion (t=0).</param>
        /// <param name="q2">The second quaternion (t=0.33).</param>
        /// <param name="q3">The third quaternion (t=0.66).</param>
        /// <param name="q4">The last quaternion (t=@One).</param>
        /// <param name="t">Position, in range [0,1].</param>
        /// <returns>Quaternion matching orientation.</returns>
        public static @ClassName Cubic(@ClassName q1, @ClassName q2, @ClassName q3, @ClassName q4, @TypeName t)
        {
            throw new NotImplementedException();
        }


        #endregion

        #region IEquatable<@ClassName> Members

        public bool Equals(@ClassName other)
        {
            return this == other;
        }

        #endregion

        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (obj is @ClassName)
            {
                return this.CompareTo((@ClassName)obj);
            }
            throw new ArgumentException("Invalid argument.");
        }

        #endregion

        #region IComparable<@ClassName> Members

        public int CompareTo(@ClassName other)
        {
            return (Re + Im.X + Im.Y + Im.Z).CompareTo(
                other.Re + other.Im.X + other.Im.Y + other.Im.Z);
        }

        #endregion
    }


#if SHARPMEDIA_TESTSUITE
    [TestSuite]
    internal class Test_@ClassName
    {
        [CorrectnessTest]
        public void Properites()
        {
            @ClassName q = new @ClassName(@One, 2, 3, (@TypeName)0.5);
            Assert.IsTrue(q.Conjugate.Equals(new @ClassName(@One, -2, -3, (@TypeName)-0.5)));
            @ClassName q2 = q * @ClassName.Identity;
            Assert.IsTrue(q2 == q);
            Assert.IsTrue(q.Im == new @Vector3ClassName(2, 3, (@TypeName)0.5));
            Assert.AreEqual(@One, q.Re);
            Assert.AreEqual(@One, q.Normal.Length);
            Assert.AreEqual(false, q.IsReal);
            Assert.IsTrue(q.NormInverse == q.Conjugate);
        }

        [CorrectnessTest]
        public void Mul()
        {
            @ClassName q = new @ClassName(@One, 2, 3, (@TypeName)15.5);
            Assert.IsTrue(@ClassName.NearEqual(q * q.Inverse, @ClassName.Identity));
        }

        [CorrectnessTest]
        public void Add()
        {
            @ClassName q = new @ClassName(3, 2, @One, 7);
            Assert.IsTrue(q + @ClassName.Zero == q);
            Assert.IsTrue(q + q == 2 * q);
        }


        [CorrectnessTest]
        public void Transform()
        {
            @ClassName q2 = @ClassName.FromAxis(new @Vector3ClassName(0, 1, 0), @Zero);
            Assert.IsTrue(q2 == @ClassName.Identity);
            @ClassName q = @ClassName.FromAxis(new @Vector3ClassName(0, 0, 1), (@TypeName)(global::System.Math.PI / 2.0));
            @Matrix3x3ClassName m = q.ToMatrix();
            Assert.IsTrue(@Vector3ClassName.NearEqual(m * @Vector3ClassName.AxisY, new @Vector3ClassName(-1, 0, 0)));
            Assert.IsTrue(@Vector3ClassName.NearEqual(q * @Vector3ClassName.AxisY, new @Vector3ClassName(-1, 0, 0)));
        }
        
    }
#endif
}

// This file was generated by TemplateEngine from template source 'Matrix3x3'
// using template 'Matrix3x3d. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.Testing;

namespace SharpMedia.Math.Matrix
{
    /// <summary>
    /// A 3x3 matrix, based on double precission numbers. 
    /// </summary>
    [Serializable]
    public class Matrix3x3d : IMatrixd<Matrix3x3d, Matrix3x3d>, IEquatable<Matrix3x3d>
    {
        #region Private Members
        public double M00, M01, M02,
                      M10, M11, M12,
                      M20, M21, M22;

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor with all matrix values.
        /// </summary>
        public Matrix3x3d(double m00, double m01, double m02,
                          double m10, double m11, double m12,
                          double m20, double m21, double m22)
        {
            M00 = m00;
            M01 = m01;
            M02 = m02;

            M10 = m10;
            M11 = m11;
            M12 = m12;

            M20 = m20;
            M21 = m21;
            M22 = m22;
        }

        /// <summary>
        /// Row matrix construction.
        /// </summary>
        public Matrix3x3d(Vector3d row1, Vector3d row2, Vector3d row3)
        {
            M00 = row1.X; M01 = row1.Y; M02 = row1.Z;
            M10 = row2.X; M11 = row2.Y; M12 = row2.Z;
            M20 = row3.X; M21 = row3.Y; M22 = row3.Z;
        }

        /// <summary>
        /// Array constructor.
        /// </summary>
        /// <param name="array">Must be 3x3 array.</param>
        public Matrix3x3d(double[,] array)
        {
            if (array == null) throw new ArgumentNullException("Array must be non null.");
            if (array.GetLength(0) != 3 || array.GetLength(1) != 3) throw new ArgumentException("Array must be 3x3.");

            M00 = array[0, 0];
            M10 = array[1, 0];
            M20 = array[2, 0];

            M01 = array[0, 1];
            M11 = array[1, 1];
            M21 = array[2, 1];

            M02 = array[0, 2];
            M12 = array[1, 2];
            M22 = array[2, 2];
        }

        #endregion

        #region Row/Column Accessors

        /// <summary>
        /// First row of matrix.
        /// </summary>
        public Vector3d Row1
        {
            get { return new Vector3d(M00, M01, M02); }
        }

        /// <summary>
        /// Second row of matrix.
        /// </summary>
        public Vector3d Row2
        {
            get { return new Vector3d(M10, M11, M12); }
        }

        /// <summary>
        /// Third row of matrix.
        /// </summary>
        public Vector3d Row3
        {
            get { return new Vector3d(M20, M21, M22); }
        }

        /// <summary>
        /// First column.
        /// </summary>
        public Vector3d Column1
        {
            get { return new Vector3d(M00, M10, M20); }
        }

        /// <summary>
        /// Second column.
        /// </summary>
        public Vector3d Column2
        {
            get { return new Vector3d(M01, M11, M21); }
        }

        /// <summary>
        /// Third column.
        /// </summary>
        public Vector3d Column3
        {
            get { return new Vector3d(M02, M12, M22); }
        }

        #endregion

        #region Static Members

        /// <summary>
        /// Creates a rotational matrix.
        /// </summary>
        public static Matrix3x3d CreateRotation(double angle, Vector3d axis)
        {
            return null;
        }


        /// <summary>
        /// Creates a 2D rotation.
        /// </summary>
        public static Matrix3x3d CreateRotation(double angle)
        {
            double sin, cos;
            MathHelper.SinCos(angle, out sin, out cos);

            return new Matrix3x3d(cos, -sin, 0,
                                  sin, cos, 0,
                                  0, 0, 1);
        }

        /// <summary>
        /// Creates a scale matrix.
        /// </summary>
        public static Matrix3x3d CreateScale(Vector3d scale)
        {
            return new Matrix3x3d(scale.X, 0, 0,
                                  0, scale.Y, 0,
                                  0, 0, scale.Z);
        }

        /// <summary>
        /// Creates a scale matrix.
        /// </summary>
        public static Matrix3x3d CreateScale(Vector2d scale)
        {
            return new Matrix3x3d(scale.X, 0, 0,
                                  0, scale.Y, 0,
                                  0, 0, 1);
        }

        /// <summary>
        /// Creates translation.
        /// </summary>
        /// <param name="translation"></param>
        /// <returns></returns>
        public static Matrix3x3d CreateTranslation(Vector2d translate)
        {
            return new Matrix3x3d(1, 0, 0,
                                  0, 1, 0,
                                  translate.X, translate.Y, 1);
        }

        /// <summary>
        /// Create a 2D rotation with translation.
        /// </summary>
        public static Matrix3x3d CreateRotationTranslation(double angle, Vector2d translate)
        {
            double sin, cos;
            MathHelper.SinCos(angle, out sin, out cos);

            return new Matrix3x3d(cos, -sin, 0,
                                  sin, cos, 0,
                                  translate.X, translate.Y, 1);
        }

        /// <summary>
        /// Identity matrix.
        /// </summary>
        public static readonly Matrix3x3d Identity = new Matrix3x3d(1.0, 0.0, 0.0,
                                                          0.0, 1.0, 0.0,
                                                          0.0, 0.0, 1.0);

        /// <summary>
        /// Zero matrix.
        /// </summary>
        public static readonly Matrix3x3d Zero = new Matrix3x3d(0.0, 0.0, 0.0,
                                                          0.0, 0.0, 0.0,
                                                          0.0, 0.0, 0.0);

        //#ifdef NearEqual


        /// <summary>
        /// Are matrices nearly equal (due to numeric errors).
        /// </summary>
        /// <param name="m">The other matrix.</param>
        /// <returns>Are nearly equal</returns>
        public static bool NearEqual(Matrix3x3d first, Matrix3x3d other)
        {
            if (MathHelper.NearEqual(first.M00, other.M00) && MathHelper.NearEqual(first.M01, other.M01) && MathHelper.NearEqual(first.M02, other.M02) &&
                MathHelper.NearEqual(first.M10, other.M10) && MathHelper.NearEqual(first.M11, other.M11) && MathHelper.NearEqual(first.M12, other.M12) &&
                MathHelper.NearEqual(first.M20, other.M20) && MathHelper.NearEqual(first.M21, other.M21) && MathHelper.NearEqual(first.M22, other.M22)) return true;
            return false;
        }

        /// <summary>
        /// Are matrices nearly equal (due to numeric errors).
        /// </summary>
        /// <param name="m">The other matrix.</param>
        /// <returns>Are nearly equal</returns>
        public static bool NearEqual(Matrix3x3d first, Matrix3x3d other, double eps)
        {
            if (MathHelper.NearEqual(first.M00, other.M00, eps) && MathHelper.NearEqual(first.M01, other.M01, eps) && MathHelper.NearEqual(first.M02, other.M02, eps) &&
                MathHelper.NearEqual(first.M10, other.M10, eps) && MathHelper.NearEqual(first.M11, other.M11, eps) && MathHelper.NearEqual(first.M12, other.M12, eps) &&
                MathHelper.NearEqual(first.M20, other.M20, eps) && MathHelper.NearEqual(first.M21, other.M21, eps) && MathHelper.NearEqual(first.M22, other.M22, eps)) return true;
            return false;
        }

        //#endif

        #endregion

        #region Operators on 3x3 Matrix

        /// <summary>
        /// Addition of two matrices.
        /// </summary>
        /// <param name="m1">The first matrix.</param>
        /// <param name="m2">The second matrix.</param>
        /// <returns>Resulting matrix.</returns>
        public static Matrix3x3d operator +(Matrix3x3d m1, Matrix3x3d m2)
        {
            return new Matrix3x3d(m1.M00 + m2.M00, m1.M01 + m2.M01, m1.M02 + m2.M02,
                                  m1.M10 + m2.M10, m1.M11 + m2.M11, m1.M12 + m2.M12,
                                  m1.M20 + m2.M20, m1.M21 + m2.M21, m1.M22 + m2.M22);
        }

        /// <summary>
        /// Substraction of two matrices.
        /// </summary>
        /// <param name="m1">The first matrix.</param>
        /// <param name="m2">The second matrix.</param>
        /// <returns>Resulting matrix.</returns>
        public static Matrix3x3d operator -(Matrix3x3d m1, Matrix3x3d m2)
        {
            return new Matrix3x3d(m1.M00 - m2.M00, m1.M01 - m2.M01, m1.M02 - m2.M02,
                                  m1.M10 - m2.M10, m1.M11 - m2.M11, m1.M12 - m2.M12,
                                  m1.M20 - m2.M20, m1.M21 - m2.M21, m1.M22 - m2.M22);
        }

        /// <summary>
        /// Negation of matrix.
        /// </summary>
        /// <param name="m1">The matrix.</param>
        /// <returns>Resulting matrix.</returns>
        public static Matrix3x3d operator -(Matrix3x3d m2)
        {
            return new Matrix3x3d(-m2.M00, -m2.M01, -m2.M02,
                                  -m2.M10, -m2.M11, -m2.M12,
                                  -m2.M20, -m2.M21, -m2.M22);
        }

        /// <summary>
        /// Multiplication by scalar.
        /// </summary>
        /// <param name="m1">The matrix.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Matrix multiplied by scalar.</returns>
        public static Matrix3x3d operator *(Matrix3x3d m1, double f)
        {
            return new Matrix3x3d(m1.M00 * f, m1.M01 * f, m1.M02 * f,
                                  m1.M10 * f, m1.M11 * f, m1.M12 * f,
                                  m1.M20 * f, m1.M21 * f, m1.M22 * f);
        }

        /// <summary>
        /// Multiplication by scalar.
        /// </summary>
        /// <param name="m1">The matrix.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Matrix multiplied by scalar.</returns>
        public static Matrix3x3d operator *(double f, Matrix3x3d m1)
        {
            return m1 * f;
        }

        /// <summary>
        /// Division by scalar.
        /// </summary>
        /// <param name="m1">The matrix.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Matrix multiplied by scalar.</returns>
        public static Matrix3x3d operator /(Matrix3x3d m1, double f)
        {
            return m1 * (1.0 / f);
        }

        /// <summary>
        /// Matrix division.
        /// </summary>
        public static Matrix3x3d operator /(Matrix3x3d m1, Matrix3x3d m2)
        {
            return m1 * m2.Inverse;
        }

        /// <summary>
        /// Matrix multiplication.
        /// </summary>
        /// <param name="m1">The first matrix.</param>
        /// <param name="m2">The second matrix.</param>
        /// <returns>Result matrix.</returns>
        public static Matrix3x3d operator *(Matrix3x3d m1, Matrix3x3d m2)
        {
            return new Matrix3x3d(
                m1.M00 * m2.M00 + m1.M01 * m2.M10 + m1.M02 * m2.M20,
                m1.M00 * m2.M01 + m1.M01 * m2.M11 + m1.M02 * m2.M21,
                m1.M00 * m2.M02 + m1.M01 * m2.M12 + m1.M02 * m2.M22,

                m1.M10 * m2.M00 + m1.M11 * m2.M10 + m1.M12 * m2.M20,
                m1.M10 * m2.M01 + m1.M11 * m2.M11 + m1.M12 * m2.M21,
                m1.M10 * m2.M02 + m1.M11 * m2.M12 + m1.M12 * m2.M22,

                m1.M20 * m2.M00 + m1.M21 * m2.M10 + m1.M22 * m2.M20,
                m1.M20 * m2.M01 + m1.M21 * m2.M11 + m1.M22 * m2.M21,
                m1.M20 * m2.M02 + m1.M21 * m2.M12 + m1.M22 * m2.M22);
        }

        /// <summary>
        /// Transformation; row vector-matrix.
        /// </summary>
        /// <param name="v">The vector to transform.</param>
        /// <param name="m">Matrix to multiply with.</param>
        /// <returns>Transformed vector.</returns>
        public static Vector3d operator *(Vector3d v, Matrix3x3d m)
        {

            return new Vector3d(v.X * m.M00 + v.Y * m.M10 + v.Z * m.M20,
                                v.X * m.M01 + v.Y * m.M11 + v.Z * m.M21,
                                v.X * m.M02 + v.Y * m.M12 + v.Z * m.M22);

        }

        /// <summary>
        /// Transformation; matrix-column vector.
        /// </summary>
        /// <param name="m">The matrix.</param>
        /// <param name="v">The vector.</param>
        /// <returns>Tranformed vector.</returns>
        public static Vector3d operator *(Matrix3x3d m, Vector3d v)
        {
            return new Vector3d(m.M00 * v.X + m.M01 * v.Y + m.M02 * v.Z,
                                m.M10 * v.X + m.M11 * v.Y + m.M12 * v.Z,
                                m.M20 * v.X + m.M21 * v.Y + m.M22 * v.Z);
        }

        /// <summary>
        /// Transformation; row vector-matrix.
        /// </summary>
        /// <param name="v">The vector to transform.</param>
        /// <param name="m">Matrix to multiply with.</param>
        /// <returns>Transformed vector.</returns>
        public static Vector2d operator *(Vector2d v, Matrix3x3d m)
        {
            double w_inv = 1.0 / (v.X * m.M02 + v.Y * m.M12 + m.M22);
            return new Vector2d(v.X * m.M00 + v.Y * m.M10 + m.M20,
                                v.X * m.M01 + v.Y * m.M11 + m.M21) * w_inv;

        }

        /// <summary>
        /// Transformation; matrix-column vector.
        /// </summary>
        /// <param name="m">The matrix.</param>
        /// <param name="v">The vector.</param>
        /// <returns>Tranformed vector.</returns>
        public static Vector2d operator *(Matrix3x3d m, Vector2d v)
        {
            double w_inv = 1.0 / (m.M20 * v.X + m.M21 * v.Y + m.M22);
            return new Vector2d(m.M00 * v.X + m.M01 * v.Y + m.M02,
                                m.M10 * v.X + m.M11 * v.Y + m.M12) * w_inv;
        }



        #endregion

        #region Overrides

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder(3 * 9 + 10);
            builder.Append("( ");
            builder.Append(M00);
            builder.Append(" ,");
            builder.Append(M01);
            builder.Append(" ,");
            builder.Append(M02);
            builder.Append(" )\n" + "( ");
            builder.Append(M10);
            builder.Append(" ,");
            builder.Append(M11);
            builder.Append(" ,");
            builder.Append(M12);
            builder.Append(" )\n" + "( ");
            builder.Append(M20);
            builder.Append(" ,");
            builder.Append(M21);
            builder.Append(" ,");
            builder.Append(M22);
            builder.Append(" )");
            return builder.ToString();
        }

        public override bool Equals(object obj)
        {
            if (obj is Matrix3x3d) return this.Equals((Matrix3x3d)obj);
            return false;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region IEquatable<Matrix3x3d> Members

        public bool Equals(Matrix3x3d other)
        {
            if (M00 == other.M00 && M01 == other.M01 && M02 == other.M02 &&
               M10 == other.M10 && M11 == other.M11 && M12 == other.M12 &&
               M20 == other.M20 && M21 == other.M21 && M22 == other.M22) return true;
            return false;
        }

        #endregion

        #region IMatrixd<Matrix3x3d,Matrix3x3d> Members

        /// <summary>
        /// The array form of matrix.
        /// </summary>
        public double[,] ArrayForm
        {
            get
            {
                return new double[3, 3] { { M00, M01, M02 }, { M10, M11, M12 }, { M20, M21, M22 } };
            }
        }


        public DenseMatrixd DenseForm
        {
            get { return new DenseMatrixd(ArrayForm); }
        }

        public double Determinant
        {
            get
            {
                return M00 * (M11 * M22 - M21 * M12)
                     + M01 * (M10 * M22 - M20 * M12) +
                       M02 * (M10 * M21 - M20 * M11);
            }
        }

        public Matrix3x3d Transpose
        {
            get
            {
                return new Matrix3x3d(M00, M10, M20,
                                      M01, M11, M21,
                                      M02, M12, M22);
            }
        }

        public double this[uint row, uint column]
        {
            get
            {
                if (row >= 3 || column >= 3) throw new ArgumentException("Index out of range.");
                switch (row * 3 + column)
                {
                    case 0:
                        return M00;
                    case 1:
                        return M01;
                    case 2:
                        return M02;
                    case 3:
                        return M10;
                    case 4:
                        return M11;
                    case 5:
                        return M12;
                    case 6:
                        return M20;
                    case 7:
                        return M21;
                    case 8:
                        return M22;
                    default:
                        throw new ArgumentException("Invalid row/column range.");
                }
            }
            set
            {
                if (row >= 3 || column >= 3) throw new ArgumentException("Index out of range.");
                switch (row * 3 + column)
                {
                    case 0:
                        M00 = value;
                        break;
                    case 1:
                        M01 = value;
                        break;
                    case 2:
                        M02 = value;
                        break;
                    case 3:
                        M10 = value;
                        break;
                    case 4:
                        M11 = value;
                        break;
                    case 5:
                        M12 = value;
                        break;
                    case 6:
                        M20 = value;
                        break;
                    case 7:
                        M21 = value;
                        break;
                    case 8:
                        M22 = value;
                        break;
                    default:
                        throw new ArgumentException("Invalid row/column range.");
                }
            }
        }

        #endregion

        #region IMatrix<Matrix3x3d> Members

        public Matrix3x3d Inverse
        {
            get
            {
                double det = Determinant;
                if (det == 0.0) throw new DivideByZeroException("Matrix is not invertable.");

                // We precompute inverse.
                double det_inv = 1.0 / det;

                // CalcInverse for 3x3 matrix is still analytic.
                return new Matrix3x3d(det_inv * (M11 * M22 - M21 * M12), det_inv * (M02 * M21 - M22 * M01), det_inv * (M01 * M12 - M11 * M02),
                                      det_inv * (M12 * M20 - M22 * M10), det_inv * (M00 * M22 - M20 * M02), det_inv * (M02 * M10 - M12 * M00),
                                      det_inv * (M10 * M21 - M20 * M11), det_inv * (M01 * M20 - M21 * M00), det_inv * (M00 * M11 - M10 * M01));


            }
        }

        public uint RowCount
        {
            get { return 3; }
        }

        public uint ColumnCount
        {
            get { return 3; }
        }

        public uint Rank
        {
            get { return Algorithms.GaussJordan.GetRank(ArrayForm); }
        }

        #endregion

        #region ICloneable<Matrix3x3d> Members

        public Matrix3x3d Clone()
        {
            return new Matrix3x3d(M00, M01, M02,
                                  M10, M11, M12,
                                  M20, M21, M22);
        }

        #endregion
    }

#if SHARPMEDIA_TESTSUITE
    [TestSuite]
    internal class Test_Matrix3x3d
    {
        [CorrectnessTest]
        public void Equality()
        {
            Assert.IsTrue(Matrix3x3d.Identity.Equals(Matrix3x3d.Identity));
            Assert.IsTrue(Object.ReferenceEquals(Matrix3x3d.Identity, Matrix3x3d.Identity));
        }

        [CorrectnessTest]
        public void Multiplication1()
        {
            Matrix3x3d m = new Matrix3x3d((double)1, (double)0, (double)0,
                                          (double)2, (double)2, (double)3,
                                          (double)0, (double)5, (double)3);

            Assert.IsTrue((m * Matrix3x3d.Identity).Equals(m));
        }

        [CorrectnessTest]
        public void Multiplication2()
        {
            Matrix3x3d m = new Matrix3x3d((double)1, (double)0, (double)0,
                                          (double)2, (double)2, (double)3,
                                          (double)0, (double)5, (double)3);

            Matrix3x3d m_inv = new Matrix3x3d(
                        (double)1, (double)0, (double)0,
                        (double)2.0 / (double)3.0, -1.0 / (double)3.0, 1.0 / (double)3.0,
                        (double)-10.0 / (double)9.0, (double)5.0 / (double)9.0, (double)-2.0 / (double)9.0);

            Matrix3x3d r = m * m_inv;
            Assert.IsTrue(Matrix3x3d.NearEqual(r, Matrix3x3d.Identity));
        }

        [CorrectnessTest]
        public void Determinant()
        {
            Matrix3x3d m = new Matrix3x3d((double)1, (double)0, (double)0,
                                          (double)2, (double)2, (double)3,
                                          (double)0, (double)5, (double)3);
            Assert.AreEqual((double)-9.0, m.Determinant);
        }

        [CorrectnessTest]
        public void Inverse()
        {
            Matrix3x3d m = new Matrix3x3d((double)1, (double)0, (double)0,
                                          (double)2, (double)2, (double)3,
                                          (double)0, (double)5, (double)3);
            m = m.Inverse;
            
            Assert.IsTrue(
                Matrix3x3d.NearEqual(m, new Matrix3x3d(
                        (double)1, (double)0, (double)0,
                        (double)2.0 / (double)3.0, -1.0 / (double)3.0, 1.0 / (double)3.0,
                        (double)-10.0 / (double)9.0, (double)5.0 / (double)9.0, (double)-2.0 / (double)9.0)));
             
        }
    }
#endif
}

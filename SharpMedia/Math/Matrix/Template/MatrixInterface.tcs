// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;

namespace SharpMedia.Math.Matrix
{
    /// <summary>
    /// Matrix specialisation to @TypeName underlaying type.
    /// </summary>
    public interface @ClassName<T, T2> : IMatrixBase<T>
    {
        /// <summary>
        /// Determinant of the matrix.
        /// </summary>
        @TypeName Determinant
        {
            get;
        }

        /// <summary>
        /// A generic array form of matrix.
        /// </summary>
        /// <remarks>It is implementation dependant whether modifying this form
        /// will modify the matrix itself.</remarks>
        @TypeName[,] ArrayForm { get; }

        /// <summary>
        /// A dense (generic) form of matrix.
        /// </summary>
        @DenseMatrixClassName DenseForm { get; }

        /// <summary>
        /// Transpose of matrix.
        /// </summary>
        T2 Transpose
        {
            get;
        }

        /// <summary>
        /// Obtains value in matrix at this position.
        /// </summary>
        /// <param name="row">The row index.</param>
        /// <param name="column">The column index.</param>
        /// <returns>Double at index.</returns>
        @TypeName this[uint row, uint column]
        {
            get;
            set;
        }

    }

    /// <summary>
    /// A sparse matrix, having at least some elements garantied to be zero.
    /// </summary>
    public interface @SparseClassName<T, T2> : @ClassName<T, T2>
    {
        /// <summary>
        /// Is the element garantied to be zero.
        /// </summary>
        /// <param name="row">The row index.</param>
        /// <param name="column">The column index.</param>
        /// <returns>Is it zero.</returns>
        bool IsGarantiedZero(uint row, uint column);
    }

}

// This file was generated by TemplateEngine from template source 'Vector4'
// using template 'Vector4f. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using SharpMedia.Testing;

namespace SharpMedia.Math
{
    /// <summary>
    /// A four dimensional vector of genetic type.
    /// </summary>
    [Serializable]
    public struct Vector4f : IComparable, IComparable<Vector4f>, IEquatable<Vector4f>
    {

        #region Public Members

        /// <summary>
        /// A vector processor delegate. Used at many places, like solver etc. Processor
        /// is a kind of Vector4f transformator.
        /// </summary>
        /// <param name="input">Input, as vector.</param>
        /// <returns>Vector output.</returns>
        public delegate Vector4f Processor(Vector4f input);

        /// <summary>
        /// The X component of the vector.
        /// </summary>
        public float X;

        /// <summary>
        /// The Y component of the vector.
        /// </summary>
        public float Y;

        /// <summary>
        /// The Z component of the vector.
        /// </summary>
        public float Z;

        /// <summary>
        /// The W component of the vector.
        /// </summary>
        public float W;

        #endregion

        #region Static Members

        //#ifdef NaN


        /// <summary>
        /// The NaN vector.
        /// </summary>
        public static Vector4f NaN
        {
            get { return new Vector4f(float.NaN, float.NaN, float.NaN, float.NaN); }
        }

        //#ifdef IsNaN


        /// <summary>
        /// Is the vector NaN. Vector is NaN, if any component is NaN.
        /// </summary>
        /// <param name="v"></param>
        /// <returns></returns>
        public static bool IsNaN(Vector4f v)
        {
            return float.IsNaN(v.X) || float.IsNaN(v.Y) || float.IsNaN(v.Z) || float.IsNaN(v.W);
        }

        //#endif

        //#endif


        /// <summary>
        /// Index access to vector.
        /// </summary>
        /// <param name="index">The index.</param>
        public float this[uint index]
        {
            get
            {
                if (index == 0) return X;
                if (index == 1) return Y;
                if (index == 2) return Z;
                if (index == 3) return W;
                throw new ArgumentException("Invalid index for 4D vector.");
            }
            set
            {
                if (index == 0) X = value;
                else if (index == 1) Y = value;
                else if (index == 2) Z = value;
                else if (index == 3) W = value;
                else throw new ArgumentException("Invalid index for 4D vector.");
            }
        }

        /// <summary>
        /// A zero vector.
        /// </summary>
        public static Vector4f Zero
        {
            get { return new Vector4f(0.0f, 0.0f, 0.0f, 0.0f); }
        }

        /// <summary>
        /// Unit vector in axis X.
        /// </summary>
        public static Vector4f AxisX
        {
            get { return new Vector4f(1.0f, 0.0f, 0.0f, 0.0f); }
        }

        /// <summary>
        /// Unit vector in axis y.
        /// </summary>
        public static Vector4f AxisY
        {
            get { return new Vector4f(0.0f, 1.0f, 0.0f, 0.0f); }
        }

        /// <summary>
        /// Unit vector in axis z.
        /// </summary>
        public static Vector4f AxisZ
        {
            get { return new Vector4f(0.0f, 0.0f, 1.0f, 0.0f); }
        }

        /// <summary>
        /// Unit vector in axis w.
        /// </summary>
        public static Vector4f AxisW
        {
            get { return new Vector4f(0.0f, 0.0f, 0.0f, 1.0f); }
        }

        //#ifdef UniformRandomSupply


        /// <summary>
        /// Unit random vector property.
        /// </summary>
        public static Vector4f UnitRandom
        {
            get
            {
                Vector4f vec = new Vector4f((float)MathHelper.UniformRandom(), (float)MathHelper.UniformRandom(),
                                            (float)MathHelper.UniformRandom(), (float)MathHelper.UniformRandom());
                return vec.Normal;
            }
        }

        //#endif
        
        //#ifdef NearEqual


        /// <summary>
        /// Checks if vectors are nearly equal.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <param name="eps">The maximum difference in one component.</param>
        /// <returns>Are vectors equal indicator.</returns>
        public static bool NearEqual(Vector4f v1, Vector4f v2, float eps)
        {
            if (!MathHelper.NearEqual(v1.X, v2.X, eps)) return false;
            if (!MathHelper.NearEqual(v1.Y, v2.Y, eps)) return false;
            if (!MathHelper.NearEqual(v1.Z, v2.Z, eps)) return false;
            if (!MathHelper.NearEqual(v1.W, v2.W, eps)) return false;
            return true;
        }

        /// <summary>
        /// Near equal using default epsilon.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result indicator.</returns>
        public static bool NearEqual(Vector4f v1, Vector4f v2)
        {
            if (!MathHelper.NearEqual(v1.X, v2.X)) return false;
            if (!MathHelper.NearEqual(v1.Y, v2.Y)) return false;
            if (!MathHelper.NearEqual(v1.Z, v2.Z)) return false;
            if (!MathHelper.NearEqual(v1.W, v2.W)) return false;
            return true;
        }

        //#endif

        /// <summary>
        /// Multiplication by components.
        /// </summary>
        public static Vector4f ComponentMultiply(Vector4f v1, Vector4f v2)
        {
            return new Vector4f(v1.X * v2.X, v1.Y * v2.Y, v1.Z * v2.Z, v1.W * v2.W);
        }

        /// <summary>
        /// Division by components.
        /// </summary>
        public static Vector4f ComponentDivision(Vector4f v1, Vector4f v2)
        {
            return new Vector4f(v1.X / v2.X, v1.Y / v2.Y, v1.Z / v2.Z, v1.W / v2.W);
        }

        #endregion

        #region Overrides

        /// <summary>
        /// Outputs vector in (X,Y) form.
        /// </summary>
        /// <returns>Vector converted to string.</returns>
        public override string ToString()
        {
            return "(" + X.ToString() + " ," + Y.ToString() + " ," + Z.ToString() + " ," + W.ToString() + ")";
        }

        /// <summary>
        /// Checks if objects equal.
        /// </summary>
        /// <param name="obj">The other object.</param>
        /// <returns>Do objects equal.</returns>
        public override bool Equals(object obj)
        {
            if (obj.GetType() == this.GetType()) return this == (Vector4f)obj;
            return false;
        }

        /// <summary>
        /// Obtain the hash code.
        /// </summary>
        /// <returns>The hash code.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region Operators

        /// <summary>
        /// Overloadable addition.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result of addition.</returns>
        public static Vector4f operator +(Vector4f v1, Vector4f v2)
        {
            return new Vector4f(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z, v1.W + v2.W);
        }

        /// <summary>
        /// Overloadable substraction.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result of substraction.</returns>
        public static Vector4f operator -(Vector4f v1, Vector4f v2)
        {
            return new Vector4f(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z, v1.W - v2.W);
        }

        /// <summary>
        /// Overloadable multiplication, or so called dot product. Result is a scalar.
        /// Dot product can be interpretered as:
        /// <code>this * other == this.Length * other.Length * this.AngleTo(other)</code>
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Result of substraction.</returns>
        public static float operator *(Vector4f v1, Vector4f v2)
        {
            return v1.X * v2.X + v1.Y * v2.Y + v1.Z * v2.Z + v1.W * v2.W;
        }

        /// <summary>
        /// Vector multiplication with scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector4f operator *(Vector4f v1, float f)
        {
            return new Vector4f(v1.X * f, v1.Y * f, v1.Z * f, v1.W * f);
        }

        /// <summary>
        /// Vector multiplication with scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector4f operator *(float f, Vector4f v1)
        {
            return new Vector4f(v1.X * f, v1.Y * f, v1.Z * f, v1.W * f);
        }

        /// <summary>
        /// Vector divided by scalar.
        /// </summary>
        /// <param name="v1">The vector.</param>
        /// <param name="f">Scalar.</param>
        /// <returns>Result of operation.</returns>
        public static Vector4f operator /(Vector4f v1, float f)
        {
            return new Vector4f(v1.X / f, v1.Y / f, v1.Z / f, v1.W / f);
        }

        /// <summary>
        /// Negation operator.
        /// </summary>
        /// <param name="v">The vector.</param>
        /// <returns>Negated vector (direction flipped).</returns>
        public static Vector4f operator -(Vector4f v)
        {
            return v * -1.0f;
        }



        /// <summary>
        /// Checks if vectors are equal. This check is precise and may not give desirable
        /// result if small errors occur due to precission errors.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Are vectorrs equal.</returns>
        public static bool operator ==(Vector4f v1, Vector4f v2)
        {
            return (v1.X == v2.X) && (v1.Y == v2.Y) && (v1.Z == v2.Z) && (v1.W == v2.W);
        }

        /// <summary>
        /// Returns if vectors are different.
        /// </summary>
        /// <param name="v1">The first vector.</param>
        /// <param name="v2">The second vector.</param>
        /// <returns>Are vectors different.</returns>
        public static bool operator !=(Vector4f v1, Vector4f v2)
        {
            return !(v1 == v2);
        }

        #endregion

        #region Properties

        /// <summary>
        /// The obsolete x-property getter.
        /// </summary>
        [Obsolete]
        public float x
        {
            get { return X; }
            set { X = value; }
        }

        /// <summary>
        /// The obsolete y-property getter.
        /// </summary>
        [Obsolete]
        public float y
        {
            get { return Y; }
            set { Y = value; }
        }

        /// <summary>
        /// The obsolete z-property getter.
        /// </summary>
        [Obsolete]
        public float z
        {
            get { return Z; }
            set { Z = value; }
        }

        /// <summary>
        /// The obsolete w-property getter.
        /// </summary>
        [Obsolete]
        public float w
        {
            get { return W; }
            set { W = value; }
        }



        //#ifdef Vector2ClassName


        /// <summary>
        /// A two dimensional vector.
        /// </summary>
        public Vector2f Vec2
        {
            set { X = value.X; Y = value.Y; Z = 0.0f; W = 0.0f; }
            get { return new Vector2f(X, Y); }
        }

        //#endif

        //#ifdef Vector3ClassName


        /// <summary>
        /// A three dimensional vector.
        /// </summary>
        public Vector3f Vec3
        {
            set { X = value.X; Y = value.Y; Z = value.Z; W = 0.0f; }
            get { return new Vector3f(X, Y, Z); }
        }

        /// <summary>
        /// Gets or sets the homohenous point 3D.
        /// </summary>
        /// <value>The point3DD.</value>
        public Vector3f Point3D
        {
            get
            {
                if (W == 0.0f)
                {
                    // Point in infinity.
                    throw new ArithmeticException("Cannot convert a homogenous 4D point to 3D point, it is point in infinity.");
                }
                float w_inv = 1.0f / W;
                return new Vector3f(X * w_inv, Y * w_inv, Z * w_inv);
            }
            set
            {
                X = value.X;
                Y = value.Y;
                Z = value.Z;
                W = 1.0f;
            }
        }

        //#endif

        /// <summary>
        /// Are all components positive.
        /// </summary>
        public bool AllPositive
        {
            get
            {
                if (X >= 0.0f && Y >= 0.0f && Z >= 0.0f && W >= 0.0f) return true;
                return false;
            }
        }

        /// <summary>
        /// Are all components positive, strictly speaking.
        /// </summary>
        public bool AllPositiveStrict
        {
            get
            {
                if (X > 0.0f && Y > 0.0f && Z > 0.0f && W > 0.0f) return true;
                return false;
            }
        }

        /// <summary>
        /// Are all components negative.
        /// </summary>
        public bool AllNegative
        {
            get
            {
                if (X <= 0.0f && Y <= 0.0f && Z <= 0.0f && W <= 0.0f) return true;
                return false;
            }
        }

        /// <summary>
        /// Are all components negative.
        /// </summary>
        public bool AllNegativeStrict
        {
            get
            {
                if (X < 0.0f && Y < 0.0f && Z < 0.0f && W < 0.0f) return true;
                return false;
            }
        }

        //#ifdef Sqrt


        /// <summary>
        /// The length of vector.
        /// </summary>
        public float Length
        {
            get { return MathHelper.Sqrt(this * this); }
            set { this = this * value / MathHelper.Sqrt((this * this)); }
        }

        /// <summary>
        /// Normal vector, always length of 1.
        /// </summary>
        public Vector4f Normal
        {
            get { return this / Length; }
        }

        /// <summary>
        /// Normalized direction.
        /// </summary>
        public Vector4f Direction
        {
            get { return this / Length; }
            set { this = value * Length; }
        }

        //#endif

        /// <summary>
        /// Length squared.
        /// </summary>
        public float Length2
        {
            get { return this * this; }
            set { this = this * value / (this * this); }
        }

        #endregion

        #region Swizzles

        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXXX
        {
            get { return new Vector4f(X, X, X, X); }
            set { X = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXXY
        {
            get { return new Vector4f(X, X, X, Y); }
            set { X = value.Z; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXXZ
        {
            get { return new Vector4f(X, X, X, Z); }
            set { X = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXXW
        {
            get { return new Vector4f(X, X, X, W); }
            set { X = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXYX
        {
            get { return new Vector4f(X, X, Y, X); }
            set { X = value.W; Y = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXYY
        {
            get { return new Vector4f(X, X, Y, Y); }
            set { X = value.Y; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXYZ
        {
            get { return new Vector4f(X, X, Y, Z); }
            set { X = value.Y; Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXYW
        {
            get { return new Vector4f(X, X, Y, W); }
            set { X = value.Y; Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXZX
        {
            get { return new Vector4f(X, X, Z, X); }
            set { X = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXZY
        {
            get { return new Vector4f(X, X, Z, Y); }
            set { X = value.Y; Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXZZ
        {
            get { return new Vector4f(X, X, Z, Z); }
            set { X = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXZW
        {
            get { return new Vector4f(X, X, Z, W); }
            set { X = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXWX
        {
            get { return new Vector4f(X, X, W, X); }
            set { X = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXWY
        {
            get { return new Vector4f(X, X, W, Y); }
            set { X = value.Y; Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXWZ
        {
            get { return new Vector4f(X, X, W, Z); }
            set { X = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XXWW
        {
            get { return new Vector4f(X, X, W, W); }
            set { X = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYXX
        {
            get { return new Vector4f(X, Y, X, X); }
            set { X = value.W; Y = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYXY
        {
            get { return new Vector4f(X, Y, X, Y); }
            set { X = value.Z; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYXZ
        {
            get { return new Vector4f(X, Y, X, Z); }
            set { X = value.Z; Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYXW
        {
            get { return new Vector4f(X, Y, X, W); }
            set { X = value.Z; Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYYX
        {
            get { return new Vector4f(X, Y, Y, X); }
            set { X = value.W; Y = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYYY
        {
            get { return new Vector4f(X, Y, Y, Y); }
            set { X = value.X; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYYZ
        {
            get { return new Vector4f(X, Y, Y, Z); }
            set { X = value.X; Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYYW
        {
            get { return new Vector4f(X, Y, Y, W); }
            set { X = value.X; Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYZX
        {
            get { return new Vector4f(X, Y, Z, X); }
            set { X = value.W; Y = value.Y; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYZY
        {
            get { return new Vector4f(X, Y, Z, Y); }
            set { X = value.X; Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYZZ
        {
            get { return new Vector4f(X, Y, Z, Z); }
            set { X = value.X; Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYZW
        {
            get { return new Vector4f(X, Y, Z, W); }
            set { X = value.X; Y = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYWX
        {
            get { return new Vector4f(X, Y, W, X); }
            set { X = value.W; Y = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYWY
        {
            get { return new Vector4f(X, Y, W, Y); }
            set { X = value.X; Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYWZ
        {
            get { return new Vector4f(X, Y, W, Z); }
            set { X = value.X; Y = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XYWW
        {
            get { return new Vector4f(X, Y, W, W); }
            set { X = value.X; Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZXX
        {
            get { return new Vector4f(X, Z, X, X); }
            set { X = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZXY
        {
            get { return new Vector4f(X, Z, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZXZ
        {
            get { return new Vector4f(X, Z, X, Z); }
            set { X = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZXW
        {
            get { return new Vector4f(X, Z, X, W); }
            set { X = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZYX
        {
            get { return new Vector4f(X, Z, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZYY
        {
            get { return new Vector4f(X, Z, Y, Y); }
            set { X = value.X; Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZYZ
        {
            get { return new Vector4f(X, Z, Y, Z); }
            set { X = value.X; Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZYW
        {
            get { return new Vector4f(X, Z, Y, W); }
            set { X = value.X; Y = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZZX
        {
            get { return new Vector4f(X, Z, Z, X); }
            set { X = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZZY
        {
            get { return new Vector4f(X, Z, Z, Y); }
            set { X = value.X; Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZZZ
        {
            get { return new Vector4f(X, Z, Z, Z); }
            set { X = value.X; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZZW
        {
            get { return new Vector4f(X, Z, Z, W); }
            set { X = value.X; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZWX
        {
            get { return new Vector4f(X, Z, W, X); }
            set { X = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZWY
        {
            get { return new Vector4f(X, Z, W, Y); }
            set { X = value.X; Y = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZWZ
        {
            get { return new Vector4f(X, Z, W, Z); }
            set { X = value.X; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XZWW
        {
            get { return new Vector4f(X, Z, W, W); }
            set { X = value.X; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWXX
        {
            get { return new Vector4f(X, W, X, X); }
            set { X = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWXY
        {
            get { return new Vector4f(X, W, X, Y); }
            set { X = value.Z; Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWXZ
        {
            get { return new Vector4f(X, W, X, Z); }
            set { X = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWXW
        {
            get { return new Vector4f(X, W, X, W); }
            set { X = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWYX
        {
            get { return new Vector4f(X, W, Y, X); }
            set { X = value.W; Y = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWYY
        {
            get { return new Vector4f(X, W, Y, Y); }
            set { X = value.X; Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWYZ
        {
            get { return new Vector4f(X, W, Y, Z); }
            set { X = value.X; Y = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWYW
        {
            get { return new Vector4f(X, W, Y, W); }
            set { X = value.X; Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWZX
        {
            get { return new Vector4f(X, W, Z, X); }
            set { X = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWZY
        {
            get { return new Vector4f(X, W, Z, Y); }
            set { X = value.X; Y = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWZZ
        {
            get { return new Vector4f(X, W, Z, Z); }
            set { X = value.X; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWZW
        {
            get { return new Vector4f(X, W, Z, W); }
            set { X = value.X; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWWX
        {
            get { return new Vector4f(X, W, W, X); }
            set { X = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWWY
        {
            get { return new Vector4f(X, W, W, Y); }
            set { X = value.X; Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWWZ
        {
            get { return new Vector4f(X, W, W, Z); }
            set { X = value.X; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f XWWW
        {
            get { return new Vector4f(X, W, W, W); }
            set { X = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXXX
        {
            get { return new Vector4f(Y, X, X, X); }
            set { X = value.W; Y = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXXY
        {
            get { return new Vector4f(Y, X, X, Y); }
            set { X = value.Z; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXXZ
        {
            get { return new Vector4f(Y, X, X, Z); }
            set { X = value.Z; Y = value.X; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXXW
        {
            get { return new Vector4f(Y, X, X, W); }
            set { X = value.Z; Y = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXYX
        {
            get { return new Vector4f(Y, X, Y, X); }
            set { X = value.W; Y = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXYY
        {
            get { return new Vector4f(Y, X, Y, Y); }
            set { X = value.Y; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXYZ
        {
            get { return new Vector4f(Y, X, Y, Z); }
            set { X = value.Y; Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXYW
        {
            get { return new Vector4f(Y, X, Y, W); }
            set { X = value.Y; Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXZX
        {
            get { return new Vector4f(Y, X, Z, X); }
            set { X = value.W; Y = value.X; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXZY
        {
            get { return new Vector4f(Y, X, Z, Y); }
            set { X = value.Y; Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXZZ
        {
            get { return new Vector4f(Y, X, Z, Z); }
            set { X = value.Y; Y = value.X; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXZW
        {
            get { return new Vector4f(Y, X, Z, W); }
            set { X = value.Y; Y = value.X; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXWX
        {
            get { return new Vector4f(Y, X, W, X); }
            set { X = value.W; Y = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXWY
        {
            get { return new Vector4f(Y, X, W, Y); }
            set { X = value.Y; Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXWZ
        {
            get { return new Vector4f(Y, X, W, Z); }
            set { X = value.Y; Y = value.X; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YXWW
        {
            get { return new Vector4f(Y, X, W, W); }
            set { X = value.Y; Y = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYXX
        {
            get { return new Vector4f(Y, Y, X, X); }
            set { X = value.W; Y = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYXY
        {
            get { return new Vector4f(Y, Y, X, Y); }
            set { X = value.Z; Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYXZ
        {
            get { return new Vector4f(Y, Y, X, Z); }
            set { X = value.Z; Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYXW
        {
            get { return new Vector4f(Y, Y, X, W); }
            set { X = value.Z; Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYYX
        {
            get { return new Vector4f(Y, Y, Y, X); }
            set { X = value.W; Y = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYYY
        {
            get { return new Vector4f(Y, Y, Y, Y); }
            set { Y = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYYZ
        {
            get { return new Vector4f(Y, Y, Y, Z); }
            set { Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYYW
        {
            get { return new Vector4f(Y, Y, Y, W); }
            set { Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYZX
        {
            get { return new Vector4f(Y, Y, Z, X); }
            set { X = value.W; Y = value.Y; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYZY
        {
            get { return new Vector4f(Y, Y, Z, Y); }
            set { Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYZZ
        {
            get { return new Vector4f(Y, Y, Z, Z); }
            set { Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYZW
        {
            get { return new Vector4f(Y, Y, Z, W); }
            set { Y = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYWX
        {
            get { return new Vector4f(Y, Y, W, X); }
            set { X = value.W; Y = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYWY
        {
            get { return new Vector4f(Y, Y, W, Y); }
            set { Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYWZ
        {
            get { return new Vector4f(Y, Y, W, Z); }
            set { Y = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YYWW
        {
            get { return new Vector4f(Y, Y, W, W); }
            set { Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZXX
        {
            get { return new Vector4f(Y, Z, X, X); }
            set { X = value.W; Y = value.X; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZXY
        {
            get { return new Vector4f(Y, Z, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZXZ
        {
            get { return new Vector4f(Y, Z, X, Z); }
            set { X = value.Z; Y = value.X; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZXW
        {
            get { return new Vector4f(Y, Z, X, W); }
            set { X = value.Z; Y = value.X; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZYX
        {
            get { return new Vector4f(Y, Z, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZYY
        {
            get { return new Vector4f(Y, Z, Y, Y); }
            set { Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZYZ
        {
            get { return new Vector4f(Y, Z, Y, Z); }
            set { Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZYW
        {
            get { return new Vector4f(Y, Z, Y, W); }
            set { Y = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZZX
        {
            get { return new Vector4f(Y, Z, Z, X); }
            set { X = value.W; Y = value.X; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZZY
        {
            get { return new Vector4f(Y, Z, Z, Y); }
            set { Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZZZ
        {
            get { return new Vector4f(Y, Z, Z, Z); }
            set { Y = value.X; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZZW
        {
            get { return new Vector4f(Y, Z, Z, W); }
            set { Y = value.X; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZWX
        {
            get { return new Vector4f(Y, Z, W, X); }
            set { X = value.W; Y = value.X; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZWY
        {
            get { return new Vector4f(Y, Z, W, Y); }
            set { Y = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZWZ
        {
            get { return new Vector4f(Y, Z, W, Z); }
            set { Y = value.X; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YZWW
        {
            get { return new Vector4f(Y, Z, W, W); }
            set { Y = value.X; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWXX
        {
            get { return new Vector4f(Y, W, X, X); }
            set { X = value.W; Y = value.X; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWXY
        {
            get { return new Vector4f(Y, W, X, Y); }
            set { X = value.Z; Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWXZ
        {
            get { return new Vector4f(Y, W, X, Z); }
            set { X = value.Z; Y = value.X; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWXW
        {
            get { return new Vector4f(Y, W, X, W); }
            set { X = value.Z; Y = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWYX
        {
            get { return new Vector4f(Y, W, Y, X); }
            set { X = value.W; Y = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWYY
        {
            get { return new Vector4f(Y, W, Y, Y); }
            set { Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWYZ
        {
            get { return new Vector4f(Y, W, Y, Z); }
            set { Y = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWYW
        {
            get { return new Vector4f(Y, W, Y, W); }
            set { Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWZX
        {
            get { return new Vector4f(Y, W, Z, X); }
            set { X = value.W; Y = value.X; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWZY
        {
            get { return new Vector4f(Y, W, Z, Y); }
            set { Y = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWZZ
        {
            get { return new Vector4f(Y, W, Z, Z); }
            set { Y = value.X; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWZW
        {
            get { return new Vector4f(Y, W, Z, W); }
            set { Y = value.X; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWWX
        {
            get { return new Vector4f(Y, W, W, X); }
            set { X = value.W; Y = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWWY
        {
            get { return new Vector4f(Y, W, W, Y); }
            set { Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWWZ
        {
            get { return new Vector4f(Y, W, W, Z); }
            set { Y = value.X; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f YWWW
        {
            get { return new Vector4f(Y, W, W, W); }
            set { Y = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXXX
        {
            get { return new Vector4f(Z, X, X, X); }
            set { X = value.W; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXXY
        {
            get { return new Vector4f(Z, X, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXXZ
        {
            get { return new Vector4f(Z, X, X, Z); }
            set { X = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXXW
        {
            get { return new Vector4f(Z, X, X, W); }
            set { X = value.Z; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXYX
        {
            get { return new Vector4f(Z, X, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXYY
        {
            get { return new Vector4f(Z, X, Y, Y); }
            set { X = value.Y; Y = value.W; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXYZ
        {
            get { return new Vector4f(Z, X, Y, Z); }
            set { X = value.Y; Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXYW
        {
            get { return new Vector4f(Z, X, Y, W); }
            set { X = value.Y; Y = value.Z; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXZX
        {
            get { return new Vector4f(Z, X, Z, X); }
            set { X = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXZY
        {
            get { return new Vector4f(Z, X, Z, Y); }
            set { X = value.Y; Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXZZ
        {
            get { return new Vector4f(Z, X, Z, Z); }
            set { X = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXZW
        {
            get { return new Vector4f(Z, X, Z, W); }
            set { X = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXWX
        {
            get { return new Vector4f(Z, X, W, X); }
            set { X = value.W; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXWY
        {
            get { return new Vector4f(Z, X, W, Y); }
            set { X = value.Y; Y = value.W; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXWZ
        {
            get { return new Vector4f(Z, X, W, Z); }
            set { X = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZXWW
        {
            get { return new Vector4f(Z, X, W, W); }
            set { X = value.Y; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYXX
        {
            get { return new Vector4f(Z, Y, X, X); }
            set { X = value.W; Y = value.Y; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYXY
        {
            get { return new Vector4f(Z, Y, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYXZ
        {
            get { return new Vector4f(Z, Y, X, Z); }
            set { X = value.Z; Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYXW
        {
            get { return new Vector4f(Z, Y, X, W); }
            set { X = value.Z; Y = value.Y; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYYX
        {
            get { return new Vector4f(Z, Y, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYYY
        {
            get { return new Vector4f(Z, Y, Y, Y); }
            set { Y = value.W; Z = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYYZ
        {
            get { return new Vector4f(Z, Y, Y, Z); }
            set { Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYYW
        {
            get { return new Vector4f(Z, Y, Y, W); }
            set { Y = value.Z; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYZX
        {
            get { return new Vector4f(Z, Y, Z, X); }
            set { X = value.W; Y = value.Y; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYZY
        {
            get { return new Vector4f(Z, Y, Z, Y); }
            set { Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYZZ
        {
            get { return new Vector4f(Z, Y, Z, Z); }
            set { Y = value.Y; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYZW
        {
            get { return new Vector4f(Z, Y, Z, W); }
            set { Y = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYWX
        {
            get { return new Vector4f(Z, Y, W, X); }
            set { X = value.W; Y = value.Y; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYWY
        {
            get { return new Vector4f(Z, Y, W, Y); }
            set { Y = value.W; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYWZ
        {
            get { return new Vector4f(Z, Y, W, Z); }
            set { Y = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZYWW
        {
            get { return new Vector4f(Z, Y, W, W); }
            set { Y = value.Y; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZXX
        {
            get { return new Vector4f(Z, Z, X, X); }
            set { X = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZXY
        {
            get { return new Vector4f(Z, Z, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZXZ
        {
            get { return new Vector4f(Z, Z, X, Z); }
            set { X = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZXW
        {
            get { return new Vector4f(Z, Z, X, W); }
            set { X = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZYX
        {
            get { return new Vector4f(Z, Z, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZYY
        {
            get { return new Vector4f(Z, Z, Y, Y); }
            set { Y = value.W; Z = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZYZ
        {
            get { return new Vector4f(Z, Z, Y, Z); }
            set { Y = value.Z; Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZYW
        {
            get { return new Vector4f(Z, Z, Y, W); }
            set { Y = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZZX
        {
            get { return new Vector4f(Z, Z, Z, X); }
            set { X = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZZY
        {
            get { return new Vector4f(Z, Z, Z, Y); }
            set { Y = value.W; Z = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZZZ
        {
            get { return new Vector4f(Z, Z, Z, Z); }
            set { Z = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZZW
        {
            get { return new Vector4f(Z, Z, Z, W); }
            set { Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZWX
        {
            get { return new Vector4f(Z, Z, W, X); }
            set { X = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZWY
        {
            get { return new Vector4f(Z, Z, W, Y); }
            set { Y = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZWZ
        {
            get { return new Vector4f(Z, Z, W, Z); }
            set { Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZZWW
        {
            get { return new Vector4f(Z, Z, W, W); }
            set { Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWXX
        {
            get { return new Vector4f(Z, W, X, X); }
            set { X = value.W; Z = value.X; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWXY
        {
            get { return new Vector4f(Z, W, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.X; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWXZ
        {
            get { return new Vector4f(Z, W, X, Z); }
            set { X = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWXW
        {
            get { return new Vector4f(Z, W, X, W); }
            set { X = value.Z; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWYX
        {
            get { return new Vector4f(Z, W, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.X; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWYY
        {
            get { return new Vector4f(Z, W, Y, Y); }
            set { Y = value.W; Z = value.X; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWYZ
        {
            get { return new Vector4f(Z, W, Y, Z); }
            set { Y = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWYW
        {
            get { return new Vector4f(Z, W, Y, W); }
            set { Y = value.Z; Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWZX
        {
            get { return new Vector4f(Z, W, Z, X); }
            set { X = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWZY
        {
            get { return new Vector4f(Z, W, Z, Y); }
            set { Y = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWZZ
        {
            get { return new Vector4f(Z, W, Z, Z); }
            set { Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWZW
        {
            get { return new Vector4f(Z, W, Z, W); }
            set { Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWWX
        {
            get { return new Vector4f(Z, W, W, X); }
            set { X = value.W; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWWY
        {
            get { return new Vector4f(Z, W, W, Y); }
            set { Y = value.W; Z = value.X; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWWZ
        {
            get { return new Vector4f(Z, W, W, Z); }
            set { Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f ZWWW
        {
            get { return new Vector4f(Z, W, W, W); }
            set { Z = value.X; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXXX
        {
            get { return new Vector4f(W, X, X, X); }
            set { X = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXXY
        {
            get { return new Vector4f(W, X, X, Y); }
            set { X = value.Z; Y = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXXZ
        {
            get { return new Vector4f(W, X, X, Z); }
            set { X = value.Z; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXXW
        {
            get { return new Vector4f(W, X, X, W); }
            set { X = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXYX
        {
            get { return new Vector4f(W, X, Y, X); }
            set { X = value.W; Y = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXYY
        {
            get { return new Vector4f(W, X, Y, Y); }
            set { X = value.Y; Y = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXYZ
        {
            get { return new Vector4f(W, X, Y, Z); }
            set { X = value.Y; Y = value.Z; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXYW
        {
            get { return new Vector4f(W, X, Y, W); }
            set { X = value.Y; Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXZX
        {
            get { return new Vector4f(W, X, Z, X); }
            set { X = value.W; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXZY
        {
            get { return new Vector4f(W, X, Z, Y); }
            set { X = value.Y; Y = value.W; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXZZ
        {
            get { return new Vector4f(W, X, Z, Z); }
            set { X = value.Y; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXZW
        {
            get { return new Vector4f(W, X, Z, W); }
            set { X = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXWX
        {
            get { return new Vector4f(W, X, W, X); }
            set { X = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXWY
        {
            get { return new Vector4f(W, X, W, Y); }
            set { X = value.Y; Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXWZ
        {
            get { return new Vector4f(W, X, W, Z); }
            set { X = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WXWW
        {
            get { return new Vector4f(W, X, W, W); }
            set { X = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYXX
        {
            get { return new Vector4f(W, Y, X, X); }
            set { X = value.W; Y = value.Y; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYXY
        {
            get { return new Vector4f(W, Y, X, Y); }
            set { X = value.Z; Y = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYXZ
        {
            get { return new Vector4f(W, Y, X, Z); }
            set { X = value.Z; Y = value.Y; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYXW
        {
            get { return new Vector4f(W, Y, X, W); }
            set { X = value.Z; Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYYX
        {
            get { return new Vector4f(W, Y, Y, X); }
            set { X = value.W; Y = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYYY
        {
            get { return new Vector4f(W, Y, Y, Y); }
            set { Y = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYYZ
        {
            get { return new Vector4f(W, Y, Y, Z); }
            set { Y = value.Z; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYYW
        {
            get { return new Vector4f(W, Y, Y, W); }
            set { Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYZX
        {
            get { return new Vector4f(W, Y, Z, X); }
            set { X = value.W; Y = value.Y; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYZY
        {
            get { return new Vector4f(W, Y, Z, Y); }
            set { Y = value.W; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYZZ
        {
            get { return new Vector4f(W, Y, Z, Z); }
            set { Y = value.Y; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYZW
        {
            get { return new Vector4f(W, Y, Z, W); }
            set { Y = value.Y; Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYWX
        {
            get { return new Vector4f(W, Y, W, X); }
            set { X = value.W; Y = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYWY
        {
            get { return new Vector4f(W, Y, W, Y); }
            set { Y = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYWZ
        {
            get { return new Vector4f(W, Y, W, Z); }
            set { Y = value.Y; Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WYWW
        {
            get { return new Vector4f(W, Y, W, W); }
            set { Y = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZXX
        {
            get { return new Vector4f(W, Z, X, X); }
            set { X = value.W; Z = value.Y; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZXY
        {
            get { return new Vector4f(W, Z, X, Y); }
            set { X = value.Z; Y = value.W; Z = value.Y; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZXZ
        {
            get { return new Vector4f(W, Z, X, Z); }
            set { X = value.Z; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZXW
        {
            get { return new Vector4f(W, Z, X, W); }
            set { X = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZYX
        {
            get { return new Vector4f(W, Z, Y, X); }
            set { X = value.W; Y = value.Z; Z = value.Y; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZYY
        {
            get { return new Vector4f(W, Z, Y, Y); }
            set { Y = value.W; Z = value.Y; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZYZ
        {
            get { return new Vector4f(W, Z, Y, Z); }
            set { Y = value.Z; Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZYW
        {
            get { return new Vector4f(W, Z, Y, W); }
            set { Y = value.Z; Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZZX
        {
            get { return new Vector4f(W, Z, Z, X); }
            set { X = value.W; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZZY
        {
            get { return new Vector4f(W, Z, Z, Y); }
            set { Y = value.W; Z = value.Z; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZZZ
        {
            get { return new Vector4f(W, Z, Z, Z); }
            set { Z = value.W; W = value.X; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZZW
        {
            get { return new Vector4f(W, Z, Z, W); }
            set { Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZWX
        {
            get { return new Vector4f(W, Z, W, X); }
            set { X = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZWY
        {
            get { return new Vector4f(W, Z, W, Y); }
            set { Y = value.W; Z = value.Y; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZWZ
        {
            get { return new Vector4f(W, Z, W, Z); }
            set { Z = value.W; W = value.Z; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WZWW
        {
            get { return new Vector4f(W, Z, W, W); }
            set { Z = value.Y; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWXX
        {
            get { return new Vector4f(W, W, X, X); }
            set { X = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWXY
        {
            get { return new Vector4f(W, W, X, Y); }
            set { X = value.Z; Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWXZ
        {
            get { return new Vector4f(W, W, X, Z); }
            set { X = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWXW
        {
            get { return new Vector4f(W, W, X, W); }
            set { X = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWYX
        {
            get { return new Vector4f(W, W, Y, X); }
            set { X = value.W; Y = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWYY
        {
            get { return new Vector4f(W, W, Y, Y); }
            set { Y = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWYZ
        {
            get { return new Vector4f(W, W, Y, Z); }
            set { Y = value.Z; Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWYW
        {
            get { return new Vector4f(W, W, Y, W); }
            set { Y = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWZX
        {
            get { return new Vector4f(W, W, Z, X); }
            set { X = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWZY
        {
            get { return new Vector4f(W, W, Z, Y); }
            set { Y = value.W; Z = value.Z; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWZZ
        {
            get { return new Vector4f(W, W, Z, Z); }
            set { Z = value.W; W = value.Y; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWZW
        {
            get { return new Vector4f(W, W, Z, W); }
            set { Z = value.Z; W = value.W; }
        }
        /// <summary>
        /// The swizzle mask.
        /// </summary>
        public Vector4f WWWX
        {
            get { return new Vector4f(W, W, W, X); }
            set { X = value.W; W = value.Z; }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor with arguments.
        /// </summary>
        /// <param name="x">The x component.</param>
        /// <param name="y">The y component.</param>
        /// <param name="z">The z component.</param>
        /// <param name="w">The w component.</param>
        public Vector4f(float x, float y, float z, float w)
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
        }

        /// <summary>
        /// Copy constructor.
        /// </summary>
        /// <param name="r">The vector to copy.</param>
        public Vector4f(Vector4f r)
        {
            X = r.X;
            Y = r.Y;
            Z = r.Z;
            W = r.W;
        }

        //#ifdef Sqrt


        /// <summary>
        /// Construction with magnitude and direction.
        /// </summary>
        /// <param name="magnitude">The magnitude, or length of vector.</param>
        /// <param name="direction">Direction of vector.</param>
        public Vector4f(float magnitude, Vector4f direction)
        {
            this = magnitude * direction.Normal;
        }

        //#endif

        #endregion

        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (obj.GetType() == this.GetType()) return CompareTo((Vector4f)obj);
            throw new Exception("Cannot compare incompatible types.");
        }

        #endregion

        #region IComparable<Vector4f> Members

        public int CompareTo(Vector4f other)
        {
            int cmp = X.CompareTo(other.X);
            if (cmp != 0) return cmp;
            cmp = Y.CompareTo(other.Y);
            if (cmp != 0) return cmp;
            cmp = Z.CompareTo(other.Z);
            if (cmp != 0) return cmp;
            return W.CompareTo(other.W);
        }

        #endregion

        #region IEquatable<Vector4f> Members

        public bool Equals(Vector4f other)
        {
            return this == other;
        }

        #endregion

        #region Conversions

        //#ifdef Vector3ClassName


        public static explicit operator Vector3f(Vector4f v)
        {
            return new Vector3f(v.X, v.Y, v.Z);
        }

        //#endif
        //#ifdef Vector2ClassName


        public static explicit operator Vector2f(Vector4f v)
        {
            return new Vector2f(v.X, v.Y);
        }

        //#endif

        #endregion
    }

}

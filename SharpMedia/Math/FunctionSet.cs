// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.AspectOriented;

namespace SharpMedia.Math
{
    #region Delegates


    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <returns>The transformation.</returns>
    internal delegate double ConstFunctiond();

    /// <summary>
    /// A function delegate
    /// </summary>
    /// <returns>The transformation.</returns>
    internal delegate float ConstFunctionf();

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <returns>The transformation.</returns>
    public delegate double Functiond(double x);

    /// <summary>
    /// A function delegate
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <returns>The transformation.</returns>
    public delegate float Functionf(float x);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="x">The parameter, Argument(1).</param>
    /// <returns>The transformation.</returns>
    public delegate double Function2d(double x, double y);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="y">The parameter, Argument(1).</param>
    /// <returns>The transformation.</returns>
    public delegate float Function2f(float x, float y);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="x">The parameter, Argument(1).</param>
    /// <param name="z">The parameter, Argument(2).</param>
    /// <returns>The transformation.</returns>
    public delegate double Function3d(double x, double y, double z);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="y">The parameter, Argument(1).</param>
    /// <param name="z">The parameter, Argument(2).</param>
    /// <returns>The transformation.</returns>
    public delegate float Function3f(float x, float y, float z);

    /// <summary>
    /// A complex function.
    /// </summary>
    /// <param name="x">The input.</param>
    /// <returns>Transformed input.</returns>
    public delegate Complexd ComplexFunctiond(double x);

    /// <summary>
    /// A complex function.
    /// </summary>
    /// <param name="x">The input.</param>
    /// <returns>Transformed input.</returns>
    public delegate Complexf ComplexFunctionf(double x);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="x">The parameter, Argument(1).</param>
    /// <param name="z">The parameter, Argument(2).</param>
    /// <param name="w">The parameter, Argument(3).</param>
    /// <returns>The transformation.</returns>
    public delegate double Function4d(double x, double y, double z, double w);

    /// <summary>
    /// A function delegate.
    /// </summary>
    /// <param name="x">The parameter, Argument(0).</param>
    /// <param name="y">The parameter, Argument(1).</param>
    /// <param name="z">The parameter, Argument(2).</param>
    /// <param name="w">The parameter, Argument(3).</param>
    /// <returns>The transformation.</returns>
    public delegate float Function4f(float x, float y, float z, float w);

    /// <summary>
    /// Path is a real -> vector 3D function.
    /// </summary>
    /// <param name="t">Parameter t, because path is usually defined parametrically.</param>
    /// <returns>The return vector.</returns>
    public delegate Vector3d Pathd(double t);

    /// <summary>
    /// Path is a real -> vector 3D function.
    /// </summary>
    /// <param name="t">Parameter t, because path is usually defined parametrically.</param>
    /// <returns>The return vector.</returns>
    public delegate Vector3f Pathf(float t);

    #endregion

    /// <summary>
    /// A set of available function a certain expression can use. Functions may
    /// be generated by expressions.
    /// </summary>
    public class FunctionSet
    {
        #region Function Sets
        private SortedDictionary<string, Functiond> doubleSet = new SortedDictionary<string, Functiond>();
        private SortedDictionary<string, Functionf> floatSet = new SortedDictionary<string, Functionf>();
        private SortedDictionary<string, Function2d> double2Set = new SortedDictionary<string, Function2d>();
        private SortedDictionary<string, Function2f> float2Set = new SortedDictionary<string, Function2f>();
        private SortedDictionary<string, Function3d> double3Set = new SortedDictionary<string, Function3d>();
        private SortedDictionary<string, Function3f> float3Set = new SortedDictionary<string, Function3f>();
        private SortedDictionary<string, Function4d> double4Set = new SortedDictionary<string, Function4d>();
        private SortedDictionary<string, Function4f> float4Set = new SortedDictionary<string, Function4f>();
        #endregion

        /// <summary>
        /// Adds a function to set. It can override one.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <param name="f">The floating version of function.</param>
        /// <param name="d">The double version of function.</param>
        public void Add([NotEmpty] string name, [NotNull] Functionf f, [NotNull] Functiond d)
        {
            doubleSet[name] = d;
            floatSet[name] = f;
        }

        /// <summary>
        /// Adds a function to set. It can override one.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <param name="f">The floating version of function.</param>
        /// <param name="d">The double version of function.</param>
        public void Add([NotEmpty] string name, [NotNull] Function2f f, Function2d d)
        {
            double2Set[name] = d;
            float2Set[name] = f;
        }

        /// <summary>
        /// Adds a function to set. It can override one.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <param name="f">The floating version of function.</param>
        /// <param name="d">The double version of function.</param>
        public void Add([NotEmpty] string name, [NotNull] Function3f f, [NotNull] Function3d d)
        {
            double3Set[name] = d;
            float3Set[name] = f;
        }

        /// <summary>
        /// Adds a function to set. It can override one.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <param name="f">The floating version of function.</param>
        /// <param name="d">The double version of function.</param>
        public void Add([NotEmpty] string name, [NotNull] Function4f f, [NotNull] Function4d d)
        {
            double4Set[name] = d;
            float4Set[name] = f;
        }

        /// <summary>
        /// Finds a double version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Functiond Findd([NotEmpty] string name)
        {
            Functiond f;
            if (doubleSet.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a float version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Functionf Findf([NotEmpty] string name)
        {
            Functionf f;
            if (floatSet.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a double version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function2d Find2d([NotEmpty] string name)
        {
            Function2d f;
            if (double2Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a float version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function2f Find2f([NotEmpty] string name)
        {
            Function2f f;
            if (float2Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a double version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function3d Find3d([NotEmpty] string name)
        {
            Function3d f;
            if (double3Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a float version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function3f Find3f([NotEmpty] string name)
        {
            Function3f f;
            if (float3Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a double version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function4d Find4d([NotEmpty] string name)
        {
            Function4d f;
            if (double4Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// Finds a float version of delegate.
        /// </summary>
        /// <param name="name">The name of function.</param>
        /// <returns>Function, or 0 if not found.</returns>
        public Function4f Find4f([NotEmpty] string name)
        {
            Function4f f;
            if (float4Set.TryGetValue(name, out f)) return f;
            return null;
        }

        /// <summary>
        /// An empty function set.
        /// </summary>
        public FunctionSet()
        {
        }

        /// <summary>
        /// A default function set.
        /// </summary>
        public static FunctionSet Default;

        #region Basic function set defined
        public static float Sin(float x)
        {
            return (float)global::System.Math.Sin((double)x);
        }
        public static float Cos(float x)
        {
            return (float)global::System.Math.Cos((double)x);
        }
        public static float Tan(float x)
        {
            return (float)global::System.Math.Tan((double)x);
        }
        public static float Asin(float x)
        {
            return (float)global::System.Math.Asin((double)x);
        }
        public static float Acos(float x)
        {
            return (float)global::System.Math.Acos((double)x);
        }
        public static float Atan(float x)
        {
            return (float)global::System.Math.Atan((double)x);
        }
        public static float Log(float x, float a)
        {
            return (float)global::System.Math.Log((double)x, (double)a);
        }
        public static float Ln(float x)
        {
            return (float)global::System.Math.Log((double)x);
        }
        public static float Exp(float x)
        {
            return (float)global::System.Math.Exp((double)x);
        }
        public static float Floor(float x)
        {
            return (float)global::System.Math.Floor((double)x);
        }
        public static float Truncate(float x)
        {
            return (float)global::System.Math.Truncate((double)x);
        }
        public static float Sqrt(float x)
        {
            return (float)global::System.Math.Sqrt((double)x);
        }
        #endregion

        

        static FunctionSet()
        {
            Default = new FunctionSet();

            // Append some defaults.
            Default.Add("sin", Sin, global::System.Math.Sin);
            Default.Add("cos", Cos, global::System.Math.Cos);
            Default.Add("sqrt", Sqrt, global::System.Math.Sqrt);
            Default.Add("tan", Tan, global::System.Math.Tan);
            Default.Add("asin", Asin, global::System.Math.Asin);
            Default.Add("acos", Acos, global::System.Math.Acos);
            Default.Add("atan", Atan, global::System.Math.Atan);
            Default.Add("log", Log, global::System.Math.Log);
            Default.Add("ln", Ln, global::System.Math.Log);
            Default.Add("exp", Exp, global::System.Math.Exp);
            Default.Add("floor", Floor, global::System.Math.Floor);
            Default.Add("trunc", Truncate, global::System.Math.Truncate);

        }

    }
}

// This file was generated by TemplateEngine from template source 'Sphere'
// using template 'Spheref. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;

namespace SharpMedia.Math.Shapes.Volumes
{

    /// <summary>
    /// An sphere.
    /// </summary>
    public sealed class Spheref :
        IVolumef, IAABoxBoundablef, ISphereBoundablef,
        IArea3f, IContainsPoint3f, ITransformable3f,
        IEquatable<Spheref>, IComparable<Spheref>, ICloneable<Spheref>
    {
        #region Public Members

        /// <summary>
        /// The center of sphere.
        /// </summary>
        public Vector3f Center;

        /// <summary>
        /// The radius of sphere.
        /// </summary>
        public float Radius;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the diameter.
        /// </summary>
        /// <value>The dimensions.</value>
        public float Diameter
        {
            get { return Radius * (float)2.0; }
            set { Radius = Diameter * (float)0.5; }
        }

        #endregion

        #region Static Members

        /// <summary>
        /// Constructor box from points.
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static Spheref FromPoints(params Vector3f[] data)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor.
        /// </summary>
        public Spheref()
        {
        }

        /// <summary>
        /// Constructor with center and radius.
        /// </summary>
        /// <param name="center">The center point of sphere.</param>
        public Spheref(Vector3f center, float radius)
        {
            if (radius < 0.0f) throw new ArgumentException("Negative radius invalid.");
            Center = center;
            Radius = radius;
        }

        #endregion

        #region IArea3f Members

        public float Area
        {
            get
            {
                return (float)4.0 * (float)MathHelper.PI * Radius * Radius;
            }
        }

        public void Tesselate(float resolution, Storage.Builders.ITriangleBuilder3f builder)
        {
            // Adaptive same as normal
            if (resolution < 0) resolution = -resolution;

            throw new NotImplementedException();

        }

        #endregion

        #region IContainsPoint3f Members

        public bool ContainsPoint(Vector3f point)
        {
            return (point - Center).Length2 <= Radius * Radius;
        }

        #endregion

        #region IAABoxBoundablef Members

        public AABoxf BoundingAABox
        {
            get
            {
                return new AABoxf(Center - new Vector3f(Radius, Radius, Radius),
                                  Center + new Vector3f(Radius, Radius, Radius));  
            }
        }

        #endregion

        #region ISphereBoundablef Members

        public Spheref BoundingSphere
        {
            get
            {
                return Clone();
            }
        }

        #endregion

        #region IVolumef

        public float Volume
        {
            get
            {
                return (float)4.0 / (float)3.0 * 
                    (float)MathHelper.PI * Radius * Radius * Radius;
            }
        }

        #endregion

        #region Transformable3

        public void Transform(Matrix.Matrix4x4f matrix)
        {
            Center = matrix * Center;
        }

        #endregion

        #region IEquatable<Spheref> Members

        public bool Equals(Spheref other)
        {
            if (Vector3f.NearEqual(Center, other.Center) &&
                MathHelper.NearEqual(Radius, other.Radius))
            {
                return true;
            }
            return false;
        }

        #endregion

        #region ICloneable Members

        public Spheref Clone()
        {
            return new Spheref(Center, Radius);
        }

        #endregion

        #region IComparable<Spheref> Members

        public int CompareTo(Spheref other)
        {
            int cmp = Center.CompareTo(other.Center);
            if (cmp != 0) return cmp;
            return Radius.CompareTo(other.Radius);
        }

        #endregion
    }
}

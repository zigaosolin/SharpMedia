// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.Testing;
using SharpMedia.Math.Matrix;
using SharpMedia.Math.Shapes.Algorithms;

namespace SharpMedia.Math.Shapes.Compounds
{



    /// <summary>
    /// An outline compund.
    /// </summary>
    /// <remarks>Outline class is provided to enable "easy" access to tesselation and storage
    /// of linked shapes. Other operations are also provided.</remarks>
    [Serializable]
    public sealed class @ClassName :
        @AreaD, @OutlineD, @TransformableD, ICloneable<@ClassName>
    {
        #region Private Class

        /// <summary>
        /// A helper class that is used to create line contours.
        /// </summary>
        private class @ContourBuilder : Storage.Builders.@LineBuilder
        {
            #region Private Members
            List<@Vector[]> contours = new List<@Vector[]>();
            #endregion

            #region Properties

            /// <summary>
            /// Obtains contours.
            /// </summary>
            public List<@Vector[]> Contours
            {
                get
                {
                    return contours;
                }
            }

            #endregion

            #region Contructors

            /// <summary>
            /// Default constructor.
            /// </summary>
            public @ContourBuilder()
            {
            }

            #endregion

            #region Helper Methods

            void FinishContour()
            {
                if (contours.Count == 0) return;
                @Vector[] lastCountour = contours[contours.Count - 1];
                if (lastCountour == null) return;
                contours.Add(null);
            }


            #endregion

            #region Builders.@LineBuilder Members

            public bool IsIndexed
            {
                get { return false; }
            }


            public uint AddControlPoints(params @Vector[] data)
            {
                // We try to figure out strips, if possible.

                throw new NotImplementedException();
            }


            public void AddIndexedLines(params uint[] indices)
            {
                throw new InvalidOperationException("The call to AddIndexedLines is invalid because builder is not indexed.");
            }

            public void AddLineStrip(bool linkFirstToLast, params @Vector[] data)
            {
                // We try to inteligently add a strip.
                if (linkFirstToLast)
                {
                    // We make sure strip is finised.
                    FinishContour();

                    // We surely have a seperate strip.
                    @Vector[] newData = new @Vector[data.Length + 1];
                    data.CopyTo(newData, 0);
                    newData[data.Length] = data[0];
                    contours.Add(newData);

                    // We make sure strip is finished.
                    FinishContour();
                }
                else
                {
                    // We check if we can continue strip.
                    if (contours.Count > 0)
                    {
                        @Vector[] lastContour = contours[contours.Count - 1];

                        // It means it is ending.
                        if (lastContour == null)
                        {
                            contours.Add(data);
                        }

                        // Else we check for append.
                        if (lastContour != null && @Vector.NearEqual(lastContour[lastContour.Length - 1], data[0]))
                        {
                            // We append data.
                            @Vector[] newData = new @Vector[data.Length + lastContour.Length];
                            int i;
                            for (i = 0; i < lastContour.Length; i++)
                            {
                                newData[i] = lastContour[i];
                            }
                            for (; i < newData.Length; i++)
                            {
                                newData[i] = data[i - lastContour.Length];
                            }

                            contours[contours.Count - 1] = newData;
                            if (@Vector.NearEqual(newData[0], newData[newData.Length - 1])) FinishContour();

                        }
                        else
                        {
                            FinishContour();
                            contours.Add(data);
                        }
                    }
                }
            }

            #endregion
        }

        #endregion

        #region Public Members
        @OutlineD[] outlines;
        #endregion

        #region Properties

        /// <summary>
        /// Outline indexer.
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public @OutlineD this[uint index]
        {
            get
            {
                return outlines[index];
            }
        }

        /// <summary>
        /// Is the path closed.
        /// </summary>
        public bool IsClosed
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        /// <summary>
        /// The stop indices, if any.
        /// </summary>
        public uint[] StopIndices
        {
            get
            {
                List<uint> stops = new List<uint>();
                for (int i = 1; i < outlines.Length; i++)
                {
                    if (@Vector.NearEqual(outlines[i].Sample(@Zero), outlines[i - 1].Sample(@One)))
                    {
                        stops.Add((uint)(i - 1));
                    }
                }
                return stops.ToArray();
            }
        }



        #endregion

        #region Public Members

        //#ifdef TesselationOptions

        /// <summary>
        /// Tesselates an outline.
        /// </summary>
        /// <param name="resolution"></param>
        /// <param name="options"></param>
        public void TesselateOutline(float resolution,
            OutlineTesselation.@TesselationOptions options, Storage.Builders.@TriangleBuilder builder)
        {
            // We first generate contours.
            @ContourBuilder contourBuilder = new @ContourBuilder();
            Sample(resolution, contourBuilder);

            // Now we create outlines for each contour.
            for (int i = 0; i < contourBuilder.Contours.Count; i++)
            {
                OutlineTesselation.Tesselate(contourBuilder.Contours[i], options, builder);
            }
        }

        //#endif

        #endregion

        #region Constructors

        /// <summary>
        /// Triangle constructor.
        /// </summary>
        public @ClassName()
        {
        }

        /// <summary>
        /// Triangle construction.
        /// </summary>
        /// <param name="data"></param>
        public @ClassName(params @OutlineD[] outlines)
        {
            this.outlines = outlines;
        }

        #endregion

        #region Overrides

        public override string ToString()
        {
            return base.ToString();
        }

        public override bool Equals(object obj)
        {
            if (obj is @ClassName)
            {
                return this.Equals((@ClassName)obj);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region @AreaD Members

        public @TypeName Area
        {
            get
            {
                return @NaN;
            }
        }

        public void Tesselate(@TypeName resolution, Storage.Builders.@TriangleBuilder builder)
        {
            // We create a special line builder that will create contours.
            @ContourBuilder contourBuilder = new @ContourBuilder();
            Sample(resolution, contourBuilder);

            // We now invoke the algorithm.
            Algorithms.PolygonTesselation.Tesselate(contourBuilder.Contours, builder);
        }

        #endregion

        #region @OutlineD Members

        public @Vector Sample(@TypeName t)
        {
            uint outlineIndex = (uint)(t * (@TypeName)outlines.Length);
            @TypeName interp = t * (@TypeName)outlines.Length - (@TypeName)outlineIndex;

            return outlines[outlineIndex].Sample(interp);
        }

        public void Sample(@TypeName resolution, Storage.Builders.@LineBuilder builder)
        {
            for (int i = 0; i < outlines.Length; i++)
            {
                outlines[i].Sample(resolution, builder);
            }
        }

        #endregion

        #region @Outline Members

        public @TypeName OutlineLength
        {
            get
            {
                @TypeName length = @Zero;
                for (int i = 0; i < outlines.Length; i++)
                {
                    length += outlines[i].OutlineLength;
                }
                return length;
            }

        }

        #endregion

        #region @TransformableD

        public void Transform(Matrix.@Matrix matrix)
        {
            for (int i = 0; i < outlines.Length; i++)
            {
                if (!(outlines[i] is @TransformableD))
                {
                    throw new InvalidOperationException(
                        string.Format("The outline '{0}' at index '{1}' is not transformable", outlines[i], i));
                }
            }

            for (int i = 0; i < outlines.Length; i++)
            {
                (outlines[i] as @TransformableD).Transform(matrix);
            }
        }

        #endregion

        #region ICloneable Members

        public @ClassName Clone()
        {
            return new @ClassName(outlines);
        }

        #endregion
    }


#if SHARPMEDIA_TESTSUITE
    [TestSuite]
    internal class Test_@ClassName
    {
        [CorrectnessTest]
        public void Construction()
        {
            
        }

       

    }
#endif
}

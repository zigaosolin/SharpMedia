// This file was generated by TemplateEngine from template source 'Plane'
// using template 'Plane3d. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.Testing;

namespace SharpMedia.Math.Shapes
{


    /// <summary>
    /// A plane is infinite element in space.
    /// </summary>
    [Serializable]
    public sealed class Plane3d :
        IContainsPoint3d, ITransformable3d,
        ICloneable<Plane3d>,
        IComparable<Plane3d>,
        IEquatable<Plane3d>
        
    {
        #region Private Members

        /// <summary>
        /// The normal of plane.
        /// </summary>
        Vector3d Normal;

        /// <summary>
        /// Distance from origin.
        /// </summary>
        double D;
        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor.
        /// </summary>
        public Plane3d()
        {
        }

        /// <summary>
        /// A plane construction, given the plane normal and distance.
        /// </summary>
        /// <param name="normal">Normal.</param>
        /// <param name="distance">Distance from plane with the
        /// same normal and no transoformantion.</param>
        public Plane3d(Vector3d normal, double distance)
        {
            Normal = normal;
            D = distance;
        }

        /// <summary>
        /// Constructor from 3 points on plane that define it. Points must
        /// not lie on the same line. The order is important.
        /// </summary>
        /// <param name="p1">The first point.</param>
        /// <param name="p2">The second point.</param>
        /// <param name="p3">The third point.</param>
        public Plane3d(Vector3d p1, Vector3d p2, Vector3d p3)
        {
            Normal = PlaneNormal(p1, p2, p3);
            D = Normal * p1;
        }

        #endregion

        #region Static Members

        /// <summary>
        /// The plane normal.
        /// </summary>
        /// <param name="p1">The first point.</param>
        /// <param name="p2">The second point.</param>
        /// <param name="p3">The third point.</param>
        /// <returns></returns>
        public static Vector3d PlaneNormal(Vector3d p1, Vector3d p2, Vector3d p3)
        {
            Vector3d v1 = p2 - p1;
            Vector3d v2 = p3 - p1;

            // We create our normal.
            return (v1 ^ v2).Normal;
        }

        /// <summary>
        /// The X plane.
        /// </summary>
        public static Plane3d PlaneX
        {
            get { return new Plane3d(new Vector3d(1.0, 0.0, 0.0), 0.0); }
        }

        /// <summary>
        /// The Y plane.
        /// </summary>
        public static Plane3d PlaneY
        {
            get { return new Plane3d(new Vector3d(0.0, 1.0, 0.0), 0.0); }
        }

        /// <summary>
        /// The Z plane.
        /// </summary>
        public static Plane3d PlaneZ
        {
            get { return new Plane3d(new Vector3d(0.0, 0.0, 1.0), 0.0); }
        }

        #endregion

        #region Properties

        /// <summary>
        /// Distance of the plane.
        /// </summary>
        public double Distance
        {
            get { return D; }
            set { D = value; }
        }

        #endregion

        #region Overrides

        public override string ToString()
        {
            StringBuilder b = new StringBuilder();
            b.Append("Plane : {");
            b.Append(Normal);
            b.Append(", ");
            b.Append(D);
            b.Append("}");
            return b.ToString();
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is Plane3d) return this.Equals((Plane3d)obj);
            return false;
        }

        #endregion

        #region Public Members

        /// <summary>
        /// Projects the point on plane.
        /// </summary>
        /// <param name="p">The point.</param>
        /// <returns>Projected point.</returns>
        public Vector3d Project(Vector3d p)
        {
            // The distance from point.
            double dist = this.GetPointDistance(p);

            return p - Normal * dist;
        }

        /// <summary>
        /// Obtains point's distance to plane.
        /// </summary>
        /// <param name="v">The point.</param>
        /// <returns>Distance in abosulte, sign means which side.</returns>
        public double GetPointDistance(Vector3d v)
        {
            return Normal * v - D;
        }

        #endregion

        #region IContainsPoint3d Members

        public bool ContainsPoint(Vector3d point)
        {
            return MathHelper.NearEqual(GetPointDistance(point), 0.0);
        }

        #endregion

        #region ITransformable3d

        public void Transform(Matrix.Matrix4x4d matrix)
        {
            Normal = matrix.Inverse * Normal;
        }

        #endregion

        #region IEquatable<Plane3d> Members

        public bool Equals(Plane3d other)
        {
            if (Vector3d.NearEqual(Normal, other.Normal) &&
                MathHelper.NearEqual(D, other.D))
            {
                return true;
            }
            return false;
        }

        #endregion

        #region ICloneable Members

        public Plane3d Clone()
        {
            return new Plane3d(Normal, D);
        }

        #endregion

        #region IComparable<Triangled> Members

        public int CompareTo(Plane3d other)
        {
            int cmp = this.Normal.CompareTo(other.Normal);
            if (cmp != 0) return cmp;
            return D.CompareTo(other.D);
        }

        #endregion
    }
}

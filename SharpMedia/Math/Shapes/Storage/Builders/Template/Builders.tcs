using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace SharpMedia.Math.Shapes.Storage.Builders
{

    //#foreach Types

    /// <summary>
    /// A line builder interface.
    /// </summary>
    public interface @LineBuilder
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for line.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params @Vector[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedLines(params uint[] indices);

        /// <summary>
        /// Adds a line strip.
        /// </summary>
        /// <param name="linkFirstToLast">Should first be linked to last.</param>
        /// <param name="data">The actual data.</param>
        void AddLineStrip(bool linkFirstToLast, params @Vector[] data);
    }


    /// <summary>
    /// A triangle builder interface.
    /// </summary>
    public interface @TriangleBuilder
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for triangles.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params @Vector[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedTriangles(params uint[] indices);
    }

    //#endfor
}

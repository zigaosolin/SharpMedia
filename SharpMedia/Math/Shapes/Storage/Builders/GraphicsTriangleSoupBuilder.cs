// This file was generated by TemplateEngine from template source 'GraphicsTriangleSoupBuilder'
// using template 'GraphicsTriangleSoupBuilder. Do not modify this file directly, modify it from template source.

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace SharpMedia.Math.Shapes.Storage.Builders
{

    /// <summary>
    /// A triangle soup builder.
    /// </summary>
    public class GraphicsTriangleSoupBuilder : BaseTopologySet, ITopologySetBuilder<GraphicsTriangleSoup>,
        ITriangleBuilder2f, ITriangleBuilder2d, ITriangleBuilder3f, ITriangleBuilder3d
    {
        #region Private Members
        uint vertexCount = 0;
        bool isMapped = false;
        #endregion

        #region Helper Methods

        void AssertMapped()
        {
            AssertNotDisposed();
            if (!isMapped) throw new InvalidOperationException("Method expects buffers to be mapped.");
        }

        void AssertUnMapped()
        {
            AssertNotDisposed();
            if (isMapped) throw new InvalidOperationException("Method expects buffers to be un-mapped.");
        }

        void AssertNotDisposed()
        {
            if (query == null) throw new ObjectDisposedException("Object was already 'disposed' using finish, invalid call.");
        }

        #endregion

        #region ITopologySetBuilder<TriangleSoup> Members

        public uint MaxControlPoints
        {
            get
            {
                AssertMapped();
                return query.MaxControlPoints;
            }
        }

        public GraphicsTriangleSoup Finish()
        {
            AssertUnMapped();
            ControlPointQuery q = query;
            ShapeIndexBufferView i = indexBuffer;
            query = null;
            return new GraphicsTriangleSoup(q, i, shapeCount);
        }

        #endregion

        #region ITopologySet Members

        public override uint ControlPointsPerShape
        {
            get { return 3; }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="query"></param>
        /// <param name="indexBuffer"></param>
        public GraphicsTriangleSoupBuilder(ControlPointQuery query, ShapeIndexBufferView indexBuffer)
        {
            this.query = query;
            this.indexBuffer = indexBuffer;
        }

        #endregion

        #region Vertex Control

        
		//#foreach instanced to 'Vector2d'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector2d controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector2d controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector2d[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector2d[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector2d'

		//#foreach instanced to 'Vector2f'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector2f controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector2f controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector2f[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector2f[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector2f'

		//#foreach instanced to 'Vector3d'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector3d controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector3d controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector3d[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector3d[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector3d'

		//#foreach instanced to 'Vector3f'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector3f controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector3f controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector3f[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector3f[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector3f'

		//#foreach instanced to 'Vector4d'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector4d controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector4d controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector4d[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector4d[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector4d'

		//#foreach instanced to 'Vector4f'


        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="controlPoint">The control point position.</param>
        /// <remarks>This is not performance-wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(Vector4f controlPoint)
        {
            return AddControlPoint(CommonComponents.Position, controlPoint);
        }

        /// <summary>
        /// Adds a control point at new index.
        /// </summary>
        /// <param name="positionComponent">The position component.</param>
        /// <param name="controlPoint">The control point position</param>
        /// <remarks>This is not performance wise function call.</remarks>
        /// <returns>The index of control point.</returns>
        public uint AddControlPoint(string positionComponent, Vector4f controlPoint)
        {
            AssertMapped();

            query.Set(positionComponent, vertexCount, controlPoint);
            return vertexCount++;
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(params Vector4f[] controlPoints)
        {
            return AddControlPoints(CommonComponents.Position, controlPoints);
        }

        /// <summary>
        /// Adds control points.
        /// </summary>
        /// <param name="controlPoints">Control points.</param>
        /// <returns>The index of first control points, all others follow.</returns>
        public uint AddControlPoints(string positionComponent, params Vector4f[] controlPoints)
        {
            AssertMapped();

            uint tmp = vertexCount;
            query.Set(positionComponent, vertexCount, controlPoints);
            vertexCount += (uint)controlPoints.Length;

            return tmp;
        }

        //#endfor instanced to 'Vector4f'


        #endregion

        #region Shape Control

        
		//#foreach instanced to 'Byte'


        /// <summary>
        /// Adds an indexed triangle.
        /// </summary>
        /// <param name="id1">First control point index.</param>
        /// <param name="id2">Second control point index.</param>
        /// <param name="id3">Third control point index.</param>
        public void AddIndexedTriangle(byte id1, byte id2, byte id3)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            indexBuffer.Set(shapeCount * 3, new byte[] { id1, id2, id3 });
            shapeCount++;
        }

        /// <summary>
        /// Adds indexed triangles.
        /// </summary>
        /// <param name="indices">The indices to use.</param>
        public void AddIndexedTriangles(params byte[] indices)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            if (indices.Length % 3 != 0)
            {
                throw new ArgumentException("Indices count must be multiple of 3 in order to use triangles.");
            }

            indexBuffer.Set(shapeCount * 3, indices);
            shapeCount += (uint)indices.Length / 3;
        }

        //#endfor instanced to 'Byte'

		//#foreach instanced to 'UInt16'


        /// <summary>
        /// Adds an indexed triangle.
        /// </summary>
        /// <param name="id1">First control point index.</param>
        /// <param name="id2">Second control point index.</param>
        /// <param name="id3">Third control point index.</param>
        public void AddIndexedTriangle(ushort id1, ushort id2, ushort id3)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            indexBuffer.Set(shapeCount * 3, new ushort[] { id1, id2, id3 });
            shapeCount++;
        }

        /// <summary>
        /// Adds indexed triangles.
        /// </summary>
        /// <param name="indices">The indices to use.</param>
        public void AddIndexedTriangles(params ushort[] indices)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            if (indices.Length % 3 != 0)
            {
                throw new ArgumentException("Indices count must be multiple of 3 in order to use triangles.");
            }

            indexBuffer.Set(shapeCount * 3, indices);
            shapeCount += (uint)indices.Length / 3;
        }

        //#endfor instanced to 'UInt16'

		//#foreach instanced to 'UInt32'


        /// <summary>
        /// Adds an indexed triangle.
        /// </summary>
        /// <param name="id1">First control point index.</param>
        /// <param name="id2">Second control point index.</param>
        /// <param name="id3">Third control point index.</param>
        public void AddIndexedTriangle(uint id1, uint id2, uint id3)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            indexBuffer.Set(shapeCount * 3, new uint[] { id1, id2, id3 });
            shapeCount++;
        }

        /// <summary>
        /// Adds indexed triangles.
        /// </summary>
        /// <param name="indices">The indices to use.</param>
        public void AddIndexedTriangles(params uint[] indices)
        {
            AssertMapped();
            if (indexBuffer == null)
            {
                throw new InvalidOperationException("Index buffer not bound, cannot add indexed triangle.");
            }

            if (indices.Length % 3 != 0)
            {
                throw new ArgumentException("Indices count must be multiple of 3 in order to use triangles.");
            }

            indexBuffer.Set(shapeCount * 3, indices);
            shapeCount += (uint)indices.Length / 3;
        }

        //#endfor instanced to 'UInt32'


        #endregion

    }
}

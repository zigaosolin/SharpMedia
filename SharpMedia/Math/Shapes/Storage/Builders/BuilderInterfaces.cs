// This file was generated by TemplateEngine from template source 'BuilderInterfaces'
// using template 'BuilderInterfaces. Do not modify this file directly, modify it from template source.

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace SharpMedia.Math.Shapes.Storage.Builders
{

    
		//#foreach instanced to 'Vector2d'


    /// <summary>
    /// A line builder interface.
    /// </summary>
    public interface ILineBuilder2d
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for line.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector2d[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedLines(params uint[] indices);

        /// <summary>
        /// Adds a line strip.
        /// </summary>
        /// <param name="linkFirstToLast">Should first be linked to last.</param>
        /// <param name="data">The actual data.</param>
        void AddLineStrip(bool linkFirstToLast, params Vector2d[] data);
    }


    /// <summary>
    /// A triangle builder interface.
    /// </summary>
    public interface ITriangleBuilder2d
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for triangles.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector2d[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedTriangles(params uint[] indices);
    }

    //#endfor instanced to 'Vector2d'

		//#foreach instanced to 'Vector2f'


    /// <summary>
    /// A line builder interface.
    /// </summary>
    public interface ILineBuilder2f
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for line.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector2f[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedLines(params uint[] indices);

        /// <summary>
        /// Adds a line strip.
        /// </summary>
        /// <param name="linkFirstToLast">Should first be linked to last.</param>
        /// <param name="data">The actual data.</param>
        void AddLineStrip(bool linkFirstToLast, params Vector2f[] data);
    }


    /// <summary>
    /// A triangle builder interface.
    /// </summary>
    public interface ITriangleBuilder2f
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for triangles.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector2f[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedTriangles(params uint[] indices);
    }

    //#endfor instanced to 'Vector2f'

		//#foreach instanced to 'Vector3d'


    /// <summary>
    /// A line builder interface.
    /// </summary>
    public interface ILineBuilder3d
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for line.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector3d[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedLines(params uint[] indices);

        /// <summary>
        /// Adds a line strip.
        /// </summary>
        /// <param name="linkFirstToLast">Should first be linked to last.</param>
        /// <param name="data">The actual data.</param>
        void AddLineStrip(bool linkFirstToLast, params Vector3d[] data);
    }


    /// <summary>
    /// A triangle builder interface.
    /// </summary>
    public interface ITriangleBuilder3d
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for triangles.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector3d[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedTriangles(params uint[] indices);
    }

    //#endfor instanced to 'Vector3d'

		//#foreach instanced to 'Vector3f'


    /// <summary>
    /// A line builder interface.
    /// </summary>
    public interface ILineBuilder3f
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for line.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector3f[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedLines(params uint[] indices);

        /// <summary>
        /// Adds a line strip.
        /// </summary>
        /// <param name="linkFirstToLast">Should first be linked to last.</param>
        /// <param name="data">The actual data.</param>
        void AddLineStrip(bool linkFirstToLast, params Vector3f[] data);
    }


    /// <summary>
    /// A triangle builder interface.
    /// </summary>
    public interface ITriangleBuilder3f
    {
        /// <summary>
        /// Is indexing used.
        /// </summary>
        bool IsIndexed { get; }

        /// <summary>
        /// Adds control points for triangles.
        /// </summary>
        /// <param name="data">The data (control point positions).</param>
        /// <returns>The index of first control point, all other points are sequent.</returns>
        uint AddControlPoints(params Vector3f[] data);

        /// <summary>
        /// Adds indices to builder, if indexed.
        /// </summary>
        /// <remarks>Invalid call if IsIndexed is false.</remarks>
        /// <param name="indices">The indices.</param>
        void AddIndexedTriangles(params uint[] indices);
    }

    //#endfor instanced to 'Vector3f'

}

// This file was generated by TemplateEngine from template source 'Bezier'
// using template 'Bezier3f. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;
using SharpMedia.Testing;
using SharpMedia.AspectOriented;
using SharpMedia.Math.Shapes.Volumes;

namespace SharpMedia.Math.Shapes
{


    /// <summary>
    /// A bezier curve, using 3 control points to make the curve.
    /// </summary>
    public sealed class Bezier3f :
        IOutline3f, IControlPoints3f, IContainsPoint3f, ITransformable3f,
        IEquatable<Bezier3f>, IComparable<Bezier3f>,
        IEnumerable<Vector3f>, ICloneable<Bezier3f>
        //#ifdef 3D

        , IAABoxBoundablef, ISphereBoundablef
        //#endif
    {
        #region Public Members

        /// <summary>
        /// The first control point.
        /// </summary>
        public Vector3f A;

        /// <summary>
        /// The middle control point.
        /// </summary>
        public Vector3f B;

        /// <summary>
        /// The end control point.
        /// </summary>
        public Vector3f C;

        #endregion

        #region Properties

        /// <summary>
        /// Is it closed shape.
        /// </summary>
        public bool IsClosed
        {
            get
            {
                return Vector3f.NearEqual(A, C);
            }
        }

        #endregion

        #region Public Members

        /// <summary>
        /// Are two bezier curves connected to each other.
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public bool IsConnected(Bezier3f other)
        {
            return Vector3f.NearEqual(this.A, other.A) ||
                   Vector3f.NearEqual(this.A, other.C) ||
                   Vector3f.NearEqual(this.C, other.A) ||
                   Vector3f.NearEqual(this.C, other.C);
        }

        #endregion

        #region Static Members

        /// <summary>
        /// Creates bezier curve from 3 points (not control points).
        /// </summary>
        /// <param name="p0">Beginning point of bezier curve.</param>
        /// <param name="p1">Middle point </param>
        /// <returns>Bezier curve.</returns>
        public static Bezier3f Approximate(Vector3f p0, Vector3f p1, Vector3f p2)
        {
            return null;
        }

        /// <summary>
        /// Approximates the points by bezier curve. Points must be close to the line,
        /// first and last points are fixed.
        /// </summary>
        /// <param name="ps">The points that represent it.</param>
        /// <param name="maxBeziers">Maximum number of curves returned.</param>
        /// <returns>Bezier curves.</returns>
        public static Bezier3f[] Approximate([NotEmptyArray] Vector3f[] ps, uint maxBeziers)
        {
            return null;
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor.
        /// </summary>
        public Bezier3f()
        {
        }

        /// <summary>
        /// Constructor with all three points.
        /// </summary>
        /// <param name="p1">First control point.</param>
        /// <param name="p2">Second control point.</param>
        /// <param name="p3">Third control point.</param>
        public Bezier3f(Vector3f p1, Vector3f p2, Vector3f p3)
        {
            A = p1;
            B = p2;
            C = p3;
        }

        #endregion

        #region Overrides

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder(100);
            builder.Append("Bezier : {");
            builder.Append(A.ToString());
            builder.Append(", ");
            builder.Append(B.ToString());
            builder.Append(", ");
            builder.Append(C.ToString());
            builder.Append("}");
            return builder.ToString();
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is Bezier3f) return this.Equals((Bezier3f)obj);
            return false;
        }

        #endregion

        #region IContainsPoint3f Members

        public bool ContainsPoint(Vector3f p)
        {
            // We solve quadratic equation for t.
            // p0.x = a.x * (1-t)^2 + b.x * t * (1-t) + c.x * t^2

            float t1, t2;

            // If first is non-linear.
            if (!MathHelper.NearEqual(A.X - (float)2.0 * B.X + C.X, 0.0f))
            {
                // If no real solutions, this is not true.
                if (!Functions.Polynomial.Roots(A.X - (float)2.0 * B.X + C.X, (float)2.0 * B.X - (float)2.0 * A.X, A.X - p.X,
                                                out t1, out t2)) return false;
            }
            else if (!MathHelper.NearEqual(A.Y - (float)2.0 * B.Y + C.Y, 0.0f))
            {
                // If no real solutions, this is not true.
                if (!Functions.Polynomial.Roots(A.Y - (float)2.0 * B.Y + C.Y, (float)2.0 * B.Y - (float)2.0 * A.Y, A.Y - p.Y,
                                                out t1, out t2)) return false;

            }
            //#ifdef 3D

            else if (!MathHelper.NearEqual(A.Z - (float)2.0 * B.Z + C.Z, 0.0f))
            {
                // If no real solutions, this is not true.
                if (!Functions.Polynomial.Roots(A.Z - (float)2.0 * B.Z + C.Z, (float)2.0 * B.Z - (float)2.0 * A.Z, A.Z - p.Z,
                                                out t1, out t2)) return false;
            }
            //#endif
            else
            {
                return false;
            }

            // We check if any of parameters satisfies:
            if (t1 >= 0.0f && t1 <= 1.0f)
            {
                if (Vector3f.NearEqual(p, Sample(t1))) return true;
            }
            if (t2 >= 0.0 && t2 <= 1.0)
            {
                if (Vector3f.NearEqual(p, Sample(t2))) return true;
            }
            return false;
        }

        #endregion

        #region IOutline3f Members

        public Vector3f Sample(float t)
        {
            float t1 = 1.0f - t;
            return t1 * t1 * A + (float)2 * t1 * t * B + t * t * C;
        }

        public void Sample(float resolution, Storage.Builders.ILineBuilder3f builder)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region IOutlinef Members

        public float OutlineLength
        {
            get
            {
                // Those parameters can be changed for "section" length.
                float t1 = 0.0f, t2 = 1.0f;

                Vector3f spec;
                
                spec = new Vector3f(1, 1, 1);
                

                // We solve the equation. We first compute coefficients for first derivate.
                Vector3f M = (float)2.0 * (-(float)2.0 * Vector3f.ComponentMultiply(A, B) + C);
                Vector3f N = (float)2.0 * (Vector3f.ComponentMultiply(A, B) - A);

                // Now we must compute integral( sqrt((dx/dt)^2 + (dy/dt)^2 + (dz/dt)^2)), we fit in to the
                // formula and compute new coeficients of sqrt(polinomial) to integrate.
                float C0 = M * M;
                float C1 = (float)2.0 * M * N;
                float C2 = N * N;

                // We now compute the actual length by solving the integral:
                return (C1 + (float)2.0 * C0 * t1) / ((float)4.0 * C0) * MathHelper.Sqrt(t1 * (C1 + t1 * C0) + C2) -
                       (C1 + (float)2.0 * C0 * t2) / ((float)4.0 * C0) * MathHelper.Sqrt(t2 * (C1 + t2 * C0) + C2) +
                       ((float)4.0 * C0 * C2 - C1 * C1) / ((float)8.0 * MathHelper.Sqrt(C0 * C0 * C0)) *
                       MathHelper.Ln(((float)2.0 * C0 * t1 + C1 + (float)2.0 * MathHelper.Sqrt(C0 * (t1 * (-C1 + C0 * t1) + C2))) /
                                     ((float)2.0 * C0 * t2 + C1 + (float)2.0 * MathHelper.Sqrt(C0 * (t2 * (-C1 + C0 * t2) + C2))));
            }
        }

        #endregion

        #region IControlPoints3f Members

        public Vector3f[] ControlPoints
        {
            get
            {
                return new Vector3f[] { A, B, C };
            }
            set
            {
                if (value.Length != 3) throw new ArgumentException("Three control points expected for bezier curve.");
                A = value[0];
                B = value[1];
                C = value[2];
            }
        }

        public void SetControlPoints(uint index, Vector3f cp)
        {
            switch (index)
            {
                case 0:
                    A = cp;
                    break;
                case 1:
                    B = cp;
                    break;
                case 2:
                    C = cp;
                    break;
                default:
                    throw new ArgumentException("Index out of range, must be 0-2 for bezier curve.");
            }
        }

        public Vector3f GetControlPoint(uint index)
        {
            switch (index)
            {
                case 0:
                    return A;
                case 1:
                    return B;
                case 2:
                    return C;
                default:
                    throw new ArgumentException("Index out of range, must be 0-2 for bezier curve.");
            }
        }

        #endregion

        #region IControlPointsf Members

        public uint ControlPointCount
        {
            get { return 3; }
        }

        #endregion

        #region ITransformable3f

        public void Transform(Matrix.Matrix4x4f matrix)
        {
            A = matrix * A;
            B = matrix * B;
            C = matrix * C;
        }

        #endregion

        //#ifdef 3D


        #region IAABoxBoundablef Members

        public AABoxf BoundingAABox
        {
            get
            {
                // Possibly not optimal!
                return AABoxf.FromPoints(A, B, C);
            }
        }

        #endregion

        #region ISphereBoundablef Members

        public Spheref BoundingSphere
        {
            get
            {
                // Possibly not optimal!
                return Spheref.FromPoints(A, B, C);
            }
        }

        #endregion

        //#endif

        #region ICloneable<Bezier3f> Members

        public Bezier3f Clone()
        {
            return new Bezier3f(A, B, C);
        }

        #endregion

        #region IEquatable<Bezier3f> Members

        public bool Equals(Bezier3f other)
        {
            if (Vector3f.NearEqual(this.A, other.A) &&
                Vector3f.NearEqual(this.B, other.B) &&
                Vector3f.NearEqual(this.C, other.C)) return true;
            return false;
        }
        #endregion

        #region IComparable<ClassName> Members

        public int CompareTo(Bezier3f other)
        {
            int cmp = A.CompareTo(other.A);
            if (cmp != 0) return cmp;
            cmp = B.CompareTo(other.B);
            if (cmp != 0) return cmp;
            return C.CompareTo(other.C);

        }

        #endregion

        #region IEnumerable<Vector3f> Members

        public IEnumerator<Vector3f> GetEnumerator()
        {
            yield return A;
            yield return B;
            yield return C;
        }

        #endregion

        #region IEnumerable Members

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            yield return A;
            yield return B;
            yield return C;
        }

        #endregion


    }

#if SHARPMEDIA_TESTSUITE
    [TestSuite]
    internal class Test_Bezier3f
    {
        /*
        [CorrectnessTest]
        public void Properties()
        {
            Bezier3f b = new Bezier3f(new Vector3f(0, 0, 0),
                                    new Vector3f(1, 1, 0),
                                    new Vector3f(2, 0, 0));

            Assert.AreEqual(false, b.IsClosed);
            Assert.AreEqual(new Vector3f(0, 0, 0), b.A);
            Assert.AreEqual(new Vector3f(1, 1, 0), b.B);
            Assert.AreEqual(new Vector3f(2, 0, 0), b.C);
            Assert.AreEqual(new Vector3f(0, 0, 0), b.Sample(0.0));
            Assert.AreEqual(new Vector3f(2, 0, 0), b.Sample(1.0));
        }

        [CorrectnessTest]
        public void Contains()
        {
            Bezier3f b = new Bezier3f(new Vector3f(0, 0, 0),
                                    new Vector3f(1, 1, 0),
                                    new Vector3f(2, 0, 0));

            Vector3f p = b.Sample(0.3);
            Assert.IsTrue(b.ContainsPoint(p));
            Assert.IsFalse(b.ContainsPoint(p + new Vector3f(0, 0, 1)));
        }

        [CorrectnessTest]
        public void Intersections()
        {


        }*/
    }
#endif
}

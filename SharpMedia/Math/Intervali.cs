// This file was generated by TemplateEngine from template source 'Interval'
// using template 'Intervali. Do not modify this file directly, modify it from template source.

// This file constitutes a part of the SharpMedia project, (c) 2007 by the SharpMedia team
// and is licensed for your use under the conditions of the NDA or other legally binding contract
// that you or a legal entity you represent has signed with the SharpMedia team.
// In an event that you have received or obtained this file without such legally binding contract
// in place, you MUST destroy all files and other content to which this lincese applies and
// contact the SharpMedia team for further instructions at the internet mail address:
//
//    legal@sharpmedia.com
//
using System;
using System.Collections.Generic;
using System.Text;

using SharpMedia.Testing;
using SharpMedia.AspectOriented;

namespace SharpMedia.Math
{
    /// <summary>
    /// An interval. Interval is defined as infinite number of real numbers in
    /// some finite space and is thus a set.
    /// </summary>summary>
    /// <remarks>
    /// All intervals here are defined using [a,b] notation.
    /// </remarks>
    [Serializable]
    public struct Intervali : IComparable, IComparable<Intervali>, IEquatable<Intervali>
    {
        #region Public Members

        /// <summary>
        /// The lower boundary.
        /// </summary>
        public int A;

        /// <summary>
        /// The upper boundary.
        /// </summary>
        public int B;

        #endregion

        #region Properties

        /// <summary>
        /// The lower boundary.
        /// </summary>
        [Obsolete]
        public int a
        {
            get { return A; }
            set
            {
                A = value;
            }
        }

        /// <summary>
        /// The upper boundary.
        /// </summary>
        [Obsolete]
        public int b
        {
            get { return B; }
            set
            {
                B = value;
            }
        }

        /// <summary>
        /// The range of interval. If it is set, the lower bound must be set first.
        /// </summary>
        public int Range
        {
            get { return B - A > 0 ? B - A : 0; }
            set { B = A + value; }
        }

        #endregion

        #region Static Members

        /// <summary>
        /// A null interval.
        /// </summary>
        public static Intervali Null
        {
            get
            {
                return new Intervali(1, 0); 
            }
        }

        

        #endregion

        #region Methods

        /// <summary>
        /// Checks if value is in interval.
        /// </summary>
        /// <param name="x">The value to check.</param>
        /// <returns>True or false.</returns>
        public bool Is(int x)
        {
            return (x >= A) && (x <= B);
        }

        /// <summary>
        /// Performs a linear Sample at interval.
        /// </summary>
        /// <param name="count">Number of samples.</param>
        /// <returns>The sampled data.</returns>
        public int[] Sample([MinUInt(2)] uint count)
        {
            int dcount = (int)(count - 1);
            int range = Range;
            int[] result = new int[count];

            for (int i = 0; i < count; i++)
            {
                result[i] = A + ((int)i / dcount) * range;
            }


            return result;
        }

        

        

        /// <summary>
        /// Samples at t.
        /// </summary>
        /// <param name="t">Must be in range [0,1].</param>
        /// <returns>The real at t.</returns>
        public int Sample(int t)
        {
            return A + Range * t;
        }

        #endregion

        #region Intervals

        /// <summary>
        /// Checks if intervals are the same.
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>Are the same value.</returns>
        public override bool Equals(object obj)
        {
            if (obj.GetType() == this.GetType())
            {
                Intervali interval = (Intervali)obj;
                if (interval.A != A) return false;
                if (interval.B != B) return false;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Obtains hash code.
        /// </summary>
        /// <returns>The hash code.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion

        #region Constructors

        /// <summary>
        /// The interval with limits.
        /// </summary>
        /// <param name="a">The left limit.</param>
        /// <param name="b">The right limit.</param>
        public Intervali(int a, int b)
        {
            this.A = a;
            this.B = b;
        }

        #endregion

        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (obj is Intervali)
            {
                return this.CompareTo((Intervali)obj);
            }
            throw new ArgumentException("Invalid argument type.");
        }

        #endregion

        #region IComparable<Intervali> Members

        public int CompareTo(Intervali other)
        {
            int cmp = this.A.CompareTo(other.A);
            if (cmp != 0) return cmp;
            return B.CompareTo(other.B);
        }

        #endregion

        #region IEquatable<Intervali> Members

        public bool Equals(Intervali other)
        {
            return A == other.A && B == other.B;
        }

        #endregion
    }


#if SHARPMEDIA_TESTSUITE

    [TestSuite]
    internal class Intervali_Test
    {
        protected Intervali interval = new Intervali(0, 1);
        protected Intervali interval2 = new Intervali(0, 1);

        [CorrectnessTest]
        public void Is() { Assert.IsTrue(interval.Is((int)0.5)); Assert.IsTrue(interval.Is((int)1.0));  }
        [CorrectnessTest]
        public void Equal() { Assert.IsTrue(interval.Equals(interval2)); }
        [CorrectnessTest]
        public void A() { Assert.AreEqual(interval2.A, 0); }
        [CorrectnessTest]
        public void B() { Assert.AreEqual(interval.B, 1); }
        [CorrectnessTest]
        public void Range() { Assert.AreEqual(interval2.Range, 1); }
    }

#endif

}
